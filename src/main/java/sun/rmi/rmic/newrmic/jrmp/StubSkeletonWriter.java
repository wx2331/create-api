/*      */ package sun.rmi.rmic.newrmic.jrmp;
/*      */ 
/*      */ import com.sun.javadoc.ClassDoc;
/*      */ import com.sun.javadoc.MethodDoc;
/*      */ import com.sun.javadoc.Type;
/*      */ import java.io.IOException;
/*      */ import java.util.ArrayList;
/*      */ import java.util.Iterator;
/*      */ import java.util.List;
/*      */ import sun.rmi.rmic.newrmic.BatchEnvironment;
/*      */ import sun.rmi.rmic.newrmic.IndentingWriter;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ class StubSkeletonWriter
/*      */ {
/*      */   private final BatchEnvironment env;
/*      */   private final RemoteClass remoteClass;
/*      */   private final Constants.StubVersion version;
/*      */   private final String stubClassName;
/*      */   private final String skeletonClassName;
/*      */   private final String packageName;
/*      */   private final String stubClassSimpleName;
/*      */   private final String skeletonClassSimpleName;
/*      */   private final RemoteClass.Method[] remoteMethods;
/*      */   private final String[] methodFieldNames;
/*      */   
/*      */   StubSkeletonWriter(BatchEnvironment paramBatchEnvironment, RemoteClass paramRemoteClass, Constants.StubVersion paramStubVersion) {
/*   92 */     this.env = paramBatchEnvironment;
/*   93 */     this.remoteClass = paramRemoteClass;
/*   94 */     this.version = paramStubVersion;
/*      */     
/*   96 */     this.stubClassName = Util.binaryNameOf(paramRemoteClass.classDoc()) + "_Stub";
/*   97 */     this
/*   98 */       .skeletonClassName = Util.binaryNameOf(paramRemoteClass.classDoc()) + "_Skel";
/*      */     
/*  100 */     int i = this.stubClassName.lastIndexOf('.');
/*  101 */     this.packageName = (i != -1) ? this.stubClassName.substring(0, i) : "";
/*  102 */     this.stubClassSimpleName = this.stubClassName.substring(i + 1);
/*  103 */     this.skeletonClassSimpleName = this.skeletonClassName.substring(i + 1);
/*      */     
/*  105 */     this.remoteMethods = paramRemoteClass.remoteMethods();
/*  106 */     this.methodFieldNames = nameMethodFields(this.remoteMethods);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   String stubClassName() {
/*  114 */     return this.stubClassName;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   String skeletonClassName() {
/*  122 */     return this.skeletonClassName;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   void writeStub(IndentingWriter paramIndentingWriter) throws IOException {
/*  133 */     paramIndentingWriter.pln("// Stub class generated by rmic, do not edit.");
/*  134 */     paramIndentingWriter.pln("// Contents subject to change without notice.");
/*  135 */     paramIndentingWriter.pln();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  141 */     if (!this.packageName.equals("")) {
/*  142 */       paramIndentingWriter.pln("package " + this.packageName + ";");
/*  143 */       paramIndentingWriter.pln();
/*      */     } 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  149 */     paramIndentingWriter.plnI("public final class " + this.stubClassSimpleName);
/*  150 */     paramIndentingWriter.pln("extends java.rmi.server.RemoteStub");
/*  151 */     ClassDoc[] arrayOfClassDoc = this.remoteClass.remoteInterfaces();
/*  152 */     if (arrayOfClassDoc.length > 0) {
/*  153 */       paramIndentingWriter.p("implements ");
/*  154 */       for (byte b = 0; b < arrayOfClassDoc.length; b++) {
/*  155 */         if (b > 0) {
/*  156 */           paramIndentingWriter.p(", ");
/*      */         }
/*  158 */         paramIndentingWriter.p(arrayOfClassDoc[b].qualifiedName());
/*      */       } 
/*  160 */       paramIndentingWriter.pln();
/*      */     } 
/*  162 */     paramIndentingWriter.pOlnI("{");
/*      */     
/*  164 */     if (this.version == Constants.StubVersion.V1_1 || this.version == Constants.StubVersion.VCOMPAT) {
/*      */ 
/*      */       
/*  167 */       writeOperationsArray(paramIndentingWriter);
/*  168 */       paramIndentingWriter.pln();
/*  169 */       writeInterfaceHash(paramIndentingWriter);
/*  170 */       paramIndentingWriter.pln();
/*      */     } 
/*      */     
/*  173 */     if (this.version == Constants.StubVersion.VCOMPAT || this.version == Constants.StubVersion.V1_2) {
/*      */ 
/*      */       
/*  176 */       paramIndentingWriter.pln("private static final long serialVersionUID = 2;");
/*      */       
/*  178 */       paramIndentingWriter.pln();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  187 */       if (this.methodFieldNames.length > 0) {
/*  188 */         if (this.version == Constants.StubVersion.VCOMPAT) {
/*  189 */           paramIndentingWriter.pln("private static boolean useNewInvoke;");
/*      */         }
/*  191 */         writeMethodFieldDeclarations(paramIndentingWriter);
/*  192 */         paramIndentingWriter.pln();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  198 */         paramIndentingWriter.plnI("static {");
/*  199 */         paramIndentingWriter.plnI("try {");
/*  200 */         if (this.version == Constants.StubVersion.VCOMPAT) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/*  210 */           paramIndentingWriter.plnI("java.rmi.server.RemoteRef.class.getMethod(\"invoke\",");
/*  211 */           paramIndentingWriter.plnI("new java.lang.Class[] {");
/*  212 */           paramIndentingWriter.pln("java.rmi.Remote.class,");
/*  213 */           paramIndentingWriter.pln("java.lang.reflect.Method.class,");
/*  214 */           paramIndentingWriter.pln("java.lang.Object[].class,");
/*  215 */           paramIndentingWriter.pln("long.class");
/*  216 */           paramIndentingWriter.pOln("});");
/*  217 */           paramIndentingWriter.pO();
/*  218 */           paramIndentingWriter.pln("useNewInvoke = true;");
/*      */         } 
/*  220 */         writeMethodFieldInitializers(paramIndentingWriter);
/*  221 */         paramIndentingWriter.pOlnI("} catch (java.lang.NoSuchMethodException e) {");
/*  222 */         if (this.version == Constants.StubVersion.VCOMPAT) {
/*  223 */           paramIndentingWriter.pln("useNewInvoke = false;");
/*      */         } else {
/*  225 */           paramIndentingWriter.plnI("throw new java.lang.NoSuchMethodError(");
/*  226 */           paramIndentingWriter.pln("\"stub class initialization failed\");");
/*  227 */           paramIndentingWriter.pO();
/*      */         } 
/*  229 */         paramIndentingWriter.pOln("}");
/*  230 */         paramIndentingWriter.pOln("}");
/*  231 */         paramIndentingWriter.pln();
/*      */       } 
/*      */     } 
/*      */     
/*  235 */     writeStubConstructors(paramIndentingWriter);
/*  236 */     paramIndentingWriter.pln();
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  241 */     if (this.remoteMethods.length > 0) {
/*  242 */       paramIndentingWriter.pln("// methods from remote interfaces");
/*  243 */       for (byte b = 0; b < this.remoteMethods.length; b++) {
/*  244 */         paramIndentingWriter.pln();
/*  245 */         writeStubMethod(paramIndentingWriter, b);
/*      */       } 
/*      */     } 
/*      */     
/*  249 */     paramIndentingWriter.pOln("}");
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void writeStubConstructors(IndentingWriter paramIndentingWriter) throws IOException {
/*  258 */     paramIndentingWriter.pln("// constructors");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  265 */     if (this.version == Constants.StubVersion.V1_1 || this.version == Constants.StubVersion.VCOMPAT) {
/*      */ 
/*      */       
/*  268 */       paramIndentingWriter.plnI("public " + this.stubClassSimpleName + "() {");
/*  269 */       paramIndentingWriter.pln("super();");
/*  270 */       paramIndentingWriter.pOln("}");
/*      */     } 
/*      */     
/*  273 */     paramIndentingWriter.plnI("public " + this.stubClassSimpleName + "(" + "java.rmi.server.RemoteRef" + " ref) {");
/*  274 */     paramIndentingWriter.pln("super(ref);");
/*  275 */     paramIndentingWriter.pOln("}");
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void writeStubMethod(IndentingWriter paramIndentingWriter, int paramInt) throws IOException {
/*  285 */     RemoteClass.Method method = this.remoteMethods[paramInt];
/*  286 */     MethodDoc methodDoc = method.methodDoc();
/*  287 */     String str = methodDoc.name();
/*  288 */     Type[] arrayOfType = method.parameterTypes();
/*  289 */     String[] arrayOfString = nameParameters(arrayOfType);
/*  290 */     Type type = methodDoc.returnType();
/*  291 */     ClassDoc[] arrayOfClassDoc = method.exceptionTypes();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  297 */     paramIndentingWriter.pln("// implementation of " + 
/*  298 */         Util.getFriendlyUnqualifiedSignature(methodDoc));
/*  299 */     paramIndentingWriter.p("public " + type.toString() + " " + str + "("); byte b;
/*  300 */     for (b = 0; b < arrayOfType.length; b++) {
/*  301 */       if (b > 0) {
/*  302 */         paramIndentingWriter.p(", ");
/*      */       }
/*  304 */       paramIndentingWriter.p(arrayOfType[b].toString() + " " + arrayOfString[b]);
/*      */     } 
/*  306 */     paramIndentingWriter.plnI(")");
/*  307 */     if (arrayOfClassDoc.length > 0) {
/*  308 */       paramIndentingWriter.p("throws ");
/*  309 */       for (b = 0; b < arrayOfClassDoc.length; b++) {
/*  310 */         if (b > 0) {
/*  311 */           paramIndentingWriter.p(", ");
/*      */         }
/*  313 */         paramIndentingWriter.p(arrayOfClassDoc[b].qualifiedName());
/*      */       } 
/*  315 */       paramIndentingWriter.pln();
/*      */     } 
/*  317 */     paramIndentingWriter.pOlnI("{");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  338 */     List<ClassDoc> list = computeUniqueCatchList(arrayOfClassDoc);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  345 */     if (list.size() > 0) {
/*  346 */       paramIndentingWriter.plnI("try {");
/*      */     }
/*      */     
/*  349 */     if (this.version == Constants.StubVersion.VCOMPAT) {
/*  350 */       paramIndentingWriter.plnI("if (useNewInvoke) {");
/*      */     }
/*  352 */     if (this.version == Constants.StubVersion.VCOMPAT || this.version == Constants.StubVersion.V1_2) {
/*      */ 
/*      */       
/*  355 */       if (!Util.isVoid(type)) {
/*  356 */         paramIndentingWriter.p("Object $result = ");
/*      */       }
/*  358 */       paramIndentingWriter.p("ref.invoke(this, " + this.methodFieldNames[paramInt] + ", ");
/*  359 */       if (arrayOfType.length > 0) {
/*  360 */         paramIndentingWriter.p("new java.lang.Object[] {");
/*  361 */         for (byte b1 = 0; b1 < arrayOfType.length; b1++) {
/*  362 */           if (b1 > 0)
/*  363 */             paramIndentingWriter.p(", "); 
/*  364 */           paramIndentingWriter.p(wrapArgumentCode(arrayOfType[b1], arrayOfString[b1]));
/*      */         } 
/*  366 */         paramIndentingWriter.p("}");
/*      */       } else {
/*  368 */         paramIndentingWriter.p("null");
/*      */       } 
/*  370 */       paramIndentingWriter.pln(", " + method.methodHash() + "L);");
/*  371 */       if (!Util.isVoid(type)) {
/*  372 */         paramIndentingWriter.pln("return " + 
/*  373 */             unwrapArgumentCode(type, "$result") + ";");
/*      */       }
/*      */     } 
/*  376 */     if (this.version == Constants.StubVersion.VCOMPAT) {
/*  377 */       paramIndentingWriter.pOlnI("} else {");
/*      */     }
/*  379 */     if (this.version == Constants.StubVersion.V1_1 || this.version == Constants.StubVersion.VCOMPAT) {
/*      */ 
/*      */       
/*  382 */       paramIndentingWriter.pln("java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, " + paramInt + ", interfaceHash);");
/*      */ 
/*      */       
/*  385 */       if (arrayOfType.length > 0) {
/*  386 */         paramIndentingWriter.plnI("try {");
/*  387 */         paramIndentingWriter.pln("java.io.ObjectOutput out = call.getOutputStream();");
/*  388 */         writeMarshalArguments(paramIndentingWriter, "out", arrayOfType, arrayOfString);
/*  389 */         paramIndentingWriter.pOlnI("} catch (java.io.IOException e) {");
/*  390 */         paramIndentingWriter.pln("throw new java.rmi.MarshalException(\"error marshalling arguments\", e);");
/*      */         
/*  392 */         paramIndentingWriter.pOln("}");
/*      */       } 
/*      */       
/*  395 */       paramIndentingWriter.pln("ref.invoke(call);");
/*      */       
/*  397 */       if (Util.isVoid(type)) {
/*  398 */         paramIndentingWriter.pln("ref.done(call);");
/*      */       } else {
/*  400 */         paramIndentingWriter.pln(type.toString() + " $result;");
/*      */         
/*  402 */         paramIndentingWriter.plnI("try {");
/*  403 */         paramIndentingWriter.pln("java.io.ObjectInput in = call.getInputStream();");
/*      */         
/*  405 */         boolean bool = writeUnmarshalArgument(paramIndentingWriter, "in", type, "$result");
/*  406 */         paramIndentingWriter.pln(";");
/*  407 */         paramIndentingWriter.pOlnI("} catch (java.io.IOException e) {");
/*  408 */         paramIndentingWriter.pln("throw new java.rmi.UnmarshalException(\"error unmarshalling return\", e);");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  414 */         if (bool) {
/*  415 */           paramIndentingWriter.pOlnI("} catch (java.lang.ClassNotFoundException e) {");
/*  416 */           paramIndentingWriter.pln("throw new java.rmi.UnmarshalException(\"error unmarshalling return\", e);");
/*      */         } 
/*      */         
/*  419 */         paramIndentingWriter.pOlnI("} finally {");
/*  420 */         paramIndentingWriter.pln("ref.done(call);");
/*  421 */         paramIndentingWriter.pOln("}");
/*  422 */         paramIndentingWriter.pln("return $result;");
/*      */       } 
/*      */     } 
/*  425 */     if (this.version == Constants.StubVersion.VCOMPAT) {
/*  426 */       paramIndentingWriter.pOln("}");
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  434 */     if (list.size() > 0) {
/*  435 */       for (ClassDoc classDoc : list) {
/*  436 */         paramIndentingWriter.pOlnI("} catch (" + classDoc.qualifiedName() + " e) {");
/*  437 */         paramIndentingWriter.pln("throw e;");
/*      */       } 
/*  439 */       paramIndentingWriter.pOlnI("} catch (java.lang.Exception e) {");
/*  440 */       paramIndentingWriter.pln("throw new java.rmi.UnexpectedException(\"undeclared checked exception\", e);");
/*      */       
/*  442 */       paramIndentingWriter.pOln("}");
/*      */     } 
/*      */     
/*  445 */     paramIndentingWriter.pOln("}");
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private List<ClassDoc> computeUniqueCatchList(ClassDoc[] paramArrayOfClassDoc) {
/*  468 */     ArrayList<ClassDoc> arrayList = new ArrayList();
/*      */     
/*  470 */     arrayList.add(this.env.docRuntimeException());
/*  471 */     arrayList.add(this.env.docRemoteException());
/*      */ 
/*      */ 
/*      */     
/*  475 */     for (ClassDoc classDoc : paramArrayOfClassDoc) {
/*  476 */       if (this.env.docException().subclassOf(classDoc)) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  483 */         arrayList.clear(); break;
/*      */       } 
/*  485 */       if (classDoc.subclassOf(this.env.docException())) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  496 */         Iterator<ClassDoc> iterator = arrayList.iterator(); while (true) { if (iterator.hasNext()) {
/*  497 */             ClassDoc classDoc1 = iterator.next();
/*  498 */             if (classDoc.subclassOf(classDoc1)) {
/*      */               break;
/*      */             }
/*      */ 
/*      */ 
/*      */             
/*  504 */             if (classDoc1.subclassOf(classDoc))
/*      */             {
/*      */ 
/*      */ 
/*      */               
/*  509 */               iterator.remove();
/*      */             }
/*      */             continue;
/*      */           } 
/*  513 */           arrayList.add(classDoc); break; } 
/*      */       } 
/*  515 */     }  return arrayList;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   void writeSkeleton(IndentingWriter paramIndentingWriter) throws IOException {
/*  522 */     if (this.version == Constants.StubVersion.V1_2) {
/*  523 */       throw new AssertionError("should not generate skeleton for version " + this.version);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  530 */     paramIndentingWriter.pln("// Skeleton class generated by rmic, do not edit.");
/*  531 */     paramIndentingWriter.pln("// Contents subject to change without notice.");
/*  532 */     paramIndentingWriter.pln();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  538 */     if (!this.packageName.equals("")) {
/*  539 */       paramIndentingWriter.pln("package " + this.packageName + ";");
/*  540 */       paramIndentingWriter.pln();
/*      */     } 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  546 */     paramIndentingWriter.plnI("public final class " + this.skeletonClassSimpleName);
/*  547 */     paramIndentingWriter.pln("implements java.rmi.server.Skeleton");
/*  548 */     paramIndentingWriter.pOlnI("{");
/*      */     
/*  550 */     writeOperationsArray(paramIndentingWriter);
/*  551 */     paramIndentingWriter.pln();
/*      */     
/*  553 */     writeInterfaceHash(paramIndentingWriter);
/*  554 */     paramIndentingWriter.pln();
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  559 */     paramIndentingWriter.plnI("public java.rmi.server.Operation[] getOperations() {");
/*  560 */     paramIndentingWriter.pln("return (java.rmi.server.Operation[]) operations.clone();");
/*  561 */     paramIndentingWriter.pOln("}");
/*  562 */     paramIndentingWriter.pln();
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  567 */     paramIndentingWriter.plnI("public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)");
/*      */     
/*  569 */     paramIndentingWriter.pln("throws java.lang.Exception");
/*  570 */     paramIndentingWriter.pOlnI("{");
/*      */     
/*  572 */     if (this.version == Constants.StubVersion.VCOMPAT) {
/*  573 */       paramIndentingWriter.plnI("if (opnum < 0) {");
/*  574 */       if (this.remoteMethods.length > 0) {
/*  575 */         for (byte b1 = 0; b1 < this.remoteMethods.length; b1++) {
/*  576 */           if (b1 > 0)
/*  577 */             paramIndentingWriter.pO("} else "); 
/*  578 */           paramIndentingWriter.plnI("if (hash == " + this.remoteMethods[b1]
/*  579 */               .methodHash() + "L) {");
/*  580 */           paramIndentingWriter.pln("opnum = " + b1 + ";");
/*      */         } 
/*  582 */         paramIndentingWriter.pOlnI("} else {");
/*      */       } 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  589 */       paramIndentingWriter.pln("throw new java.rmi.UnmarshalException(\"invalid method hash\");");
/*      */       
/*  591 */       if (this.remoteMethods.length > 0) {
/*  592 */         paramIndentingWriter.pOln("}");
/*      */       }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  599 */       paramIndentingWriter.pOlnI("} else {");
/*      */     } 
/*      */     
/*  602 */     paramIndentingWriter.plnI("if (hash != interfaceHash)");
/*  603 */     paramIndentingWriter.pln("throw new java.rmi.server.SkeletonMismatchException(\"interface hash mismatch\");");
/*      */     
/*  605 */     paramIndentingWriter.pO();
/*      */     
/*  607 */     if (this.version == Constants.StubVersion.VCOMPAT) {
/*  608 */       paramIndentingWriter.pOln("}");
/*      */     }
/*  610 */     paramIndentingWriter.pln();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  622 */     if (!this.remoteClass.classDoc().isPrivate()) {
/*  623 */       paramIndentingWriter.pln(this.remoteClass.classDoc().qualifiedName() + " server = (" + this.remoteClass
/*  624 */           .classDoc().qualifiedName() + ") obj;");
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  630 */     paramIndentingWriter.plnI("switch (opnum) {");
/*  631 */     for (byte b = 0; b < this.remoteMethods.length; b++) {
/*  632 */       writeSkeletonDispatchCase(paramIndentingWriter, b);
/*      */     }
/*  634 */     paramIndentingWriter.pOlnI("default:");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  640 */     paramIndentingWriter.pln("throw new java.rmi.UnmarshalException(\"invalid method number\");");
/*      */     
/*  642 */     paramIndentingWriter.pOln("}");
/*      */     
/*  644 */     paramIndentingWriter.pOln("}");
/*      */     
/*  646 */     paramIndentingWriter.pOln("}");
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void writeSkeletonDispatchCase(IndentingWriter paramIndentingWriter, int paramInt) throws IOException {
/*  656 */     RemoteClass.Method method = this.remoteMethods[paramInt];
/*  657 */     MethodDoc methodDoc = method.methodDoc();
/*  658 */     String str1 = methodDoc.name();
/*  659 */     Type[] arrayOfType = method.parameterTypes();
/*  660 */     String[] arrayOfString = nameParameters(arrayOfType);
/*  661 */     Type type = methodDoc.returnType();
/*      */     
/*  663 */     paramIndentingWriter.pOlnI("case " + paramInt + ": // " + 
/*  664 */         Util.getFriendlyUnqualifiedSignature(methodDoc));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  670 */     paramIndentingWriter.pOlnI("{");
/*      */     
/*  672 */     if (arrayOfType.length > 0) {
/*      */ 
/*      */ 
/*      */       
/*  676 */       for (byte b1 = 0; b1 < arrayOfType.length; b1++) {
/*  677 */         paramIndentingWriter.pln(arrayOfType[b1].toString() + " " + arrayOfString[b1] + ";");
/*      */       }
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  683 */       paramIndentingWriter.plnI("try {");
/*  684 */       paramIndentingWriter.pln("java.io.ObjectInput in = call.getInputStream();");
/*  685 */       boolean bool = writeUnmarshalArguments(paramIndentingWriter, "in", arrayOfType, arrayOfString);
/*      */       
/*  687 */       paramIndentingWriter.pOlnI("} catch (java.io.IOException e) {");
/*  688 */       paramIndentingWriter.pln("throw new java.rmi.UnmarshalException(\"error unmarshalling arguments\", e);");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  694 */       if (bool) {
/*  695 */         paramIndentingWriter.pOlnI("} catch (java.lang.ClassNotFoundException e) {");
/*  696 */         paramIndentingWriter.pln("throw new java.rmi.UnmarshalException(\"error unmarshalling arguments\", e);");
/*      */       } 
/*      */       
/*  699 */       paramIndentingWriter.pOlnI("} finally {");
/*  700 */       paramIndentingWriter.pln("call.releaseInputStream();");
/*  701 */       paramIndentingWriter.pOln("}");
/*      */     } else {
/*  703 */       paramIndentingWriter.pln("call.releaseInputStream();");
/*      */     } 
/*      */     
/*  706 */     if (!Util.isVoid(type))
/*      */     {
/*      */ 
/*      */       
/*  710 */       paramIndentingWriter.p(type.toString() + " $result = ");
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  721 */     String str2 = this.remoteClass.classDoc().isPrivate() ? ("((" + methodDoc.containingClass().qualifiedName() + ") obj)") : "server";
/*      */     
/*  723 */     paramIndentingWriter.p(str2 + "." + str1 + "(");
/*  724 */     for (byte b = 0; b < arrayOfString.length; b++) {
/*  725 */       if (b > 0)
/*  726 */         paramIndentingWriter.p(", "); 
/*  727 */       paramIndentingWriter.p(arrayOfString[b]);
/*      */     } 
/*  729 */     paramIndentingWriter.pln(");");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  737 */     paramIndentingWriter.plnI("try {");
/*  738 */     if (!Util.isVoid(type)) {
/*  739 */       paramIndentingWriter.p("java.io.ObjectOutput out = ");
/*      */     }
/*  741 */     paramIndentingWriter.pln("call.getResultStream(true);");
/*  742 */     if (!Util.isVoid(type)) {
/*  743 */       writeMarshalArgument(paramIndentingWriter, "out", type, "$result");
/*  744 */       paramIndentingWriter.pln(";");
/*      */     } 
/*  746 */     paramIndentingWriter.pOlnI("} catch (java.io.IOException e) {");
/*  747 */     paramIndentingWriter.pln("throw new java.rmi.MarshalException(\"error marshalling return\", e);");
/*      */     
/*  749 */     paramIndentingWriter.pOln("}");
/*      */     
/*  751 */     paramIndentingWriter.pln("break;");
/*      */     
/*  753 */     paramIndentingWriter.pOlnI("}");
/*  754 */     paramIndentingWriter.pln();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void writeOperationsArray(IndentingWriter paramIndentingWriter) throws IOException {
/*  763 */     paramIndentingWriter.plnI("private static final java.rmi.server.Operation[] operations = {");
/*  764 */     for (byte b = 0; b < this.remoteMethods.length; b++) {
/*  765 */       if (b > 0)
/*  766 */         paramIndentingWriter.pln(","); 
/*  767 */       paramIndentingWriter.p("new java.rmi.server.Operation(\"" + this.remoteMethods[b]
/*  768 */           .operationString() + "\")");
/*      */     } 
/*  770 */     paramIndentingWriter.pln();
/*  771 */     paramIndentingWriter.pOln("};");
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void writeInterfaceHash(IndentingWriter paramIndentingWriter) throws IOException {
/*  780 */     paramIndentingWriter.pln("private static final long interfaceHash = " + this.remoteClass
/*  781 */         .interfaceHash() + "L;");
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void writeMethodFieldDeclarations(IndentingWriter paramIndentingWriter) throws IOException {
/*  791 */     for (String str : this.methodFieldNames) {
/*  792 */       paramIndentingWriter.pln("private static java.lang.reflect.Method " + str + ";");
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void writeMethodFieldInitializers(IndentingWriter paramIndentingWriter) throws IOException {
/*  803 */     for (byte b = 0; b < this.methodFieldNames.length; b++) {
/*  804 */       paramIndentingWriter.p(this.methodFieldNames[b] + " = ");
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  809 */       RemoteClass.Method method = this.remoteMethods[b];
/*  810 */       MethodDoc methodDoc = method.methodDoc();
/*  811 */       String str = methodDoc.name();
/*  812 */       Type[] arrayOfType = method.parameterTypes();
/*      */       
/*  814 */       paramIndentingWriter.p(methodDoc.containingClass().qualifiedName() + ".class.getMethod(\"" + str + "\", new java.lang.Class[] {");
/*      */       
/*  816 */       for (byte b1 = 0; b1 < arrayOfType.length; b1++) {
/*  817 */         if (b1 > 0)
/*  818 */           paramIndentingWriter.p(", "); 
/*  819 */         paramIndentingWriter.p(arrayOfType[b1].toString() + ".class");
/*      */       } 
/*  821 */       paramIndentingWriter.pln("});");
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static String[] nameMethodFields(RemoteClass.Method[] paramArrayOfMethod) {
/*  840 */     String[] arrayOfString = new String[paramArrayOfMethod.length];
/*  841 */     for (byte b = 0; b < arrayOfString.length; b++) {
/*  842 */       arrayOfString[b] = "$method_" + paramArrayOfMethod[b].methodDoc().name() + "_" + b;
/*      */     }
/*  844 */     return arrayOfString;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static String[] nameParameters(Type[] paramArrayOfType) {
/*  857 */     String[] arrayOfString = new String[paramArrayOfType.length];
/*  858 */     for (byte b = 0; b < arrayOfString.length; b++) {
/*  859 */       arrayOfString[b] = "$param_" + 
/*  860 */         generateNameFromType(paramArrayOfType[b]) + "_" + (b + 1);
/*      */     }
/*  862 */     return arrayOfString;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static String generateNameFromType(Type paramType) {
/*  870 */     String str = paramType.typeName().replace('.', '$');
/*  871 */     int i = paramType.dimension().length() / 2;
/*  872 */     for (byte b = 0; b < i; b++) {
/*  873 */       str = "arrayOf_" + str;
/*      */     }
/*  875 */     return str;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static void writeMarshalArgument(IndentingWriter paramIndentingWriter, String paramString1, Type paramType, String paramString2) throws IOException {
/*  892 */     if (paramType.dimension().length() > 0 || paramType.asClassDoc() != null) {
/*  893 */       paramIndentingWriter.p(paramString1 + ".writeObject(" + paramString2 + ")");
/*  894 */     } else if (paramType.typeName().equals("boolean")) {
/*  895 */       paramIndentingWriter.p(paramString1 + ".writeBoolean(" + paramString2 + ")");
/*  896 */     } else if (paramType.typeName().equals("byte")) {
/*  897 */       paramIndentingWriter.p(paramString1 + ".writeByte(" + paramString2 + ")");
/*  898 */     } else if (paramType.typeName().equals("char")) {
/*  899 */       paramIndentingWriter.p(paramString1 + ".writeChar(" + paramString2 + ")");
/*  900 */     } else if (paramType.typeName().equals("short")) {
/*  901 */       paramIndentingWriter.p(paramString1 + ".writeShort(" + paramString2 + ")");
/*  902 */     } else if (paramType.typeName().equals("int")) {
/*  903 */       paramIndentingWriter.p(paramString1 + ".writeInt(" + paramString2 + ")");
/*  904 */     } else if (paramType.typeName().equals("long")) {
/*  905 */       paramIndentingWriter.p(paramString1 + ".writeLong(" + paramString2 + ")");
/*  906 */     } else if (paramType.typeName().equals("float")) {
/*  907 */       paramIndentingWriter.p(paramString1 + ".writeFloat(" + paramString2 + ")");
/*  908 */     } else if (paramType.typeName().equals("double")) {
/*  909 */       paramIndentingWriter.p(paramString1 + ".writeDouble(" + paramString2 + ")");
/*      */     } else {
/*  911 */       throw new AssertionError(paramType);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static void writeMarshalArguments(IndentingWriter paramIndentingWriter, String paramString, Type[] paramArrayOfType, String[] paramArrayOfString) throws IOException {
/*  926 */     assert paramArrayOfType.length == paramArrayOfString.length;
/*      */     
/*  928 */     for (byte b = 0; b < paramArrayOfType.length; b++) {
/*  929 */       writeMarshalArgument(paramIndentingWriter, paramString, paramArrayOfType[b], paramArrayOfString[b]);
/*  930 */       paramIndentingWriter.pln(";");
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static boolean writeUnmarshalArgument(IndentingWriter paramIndentingWriter, String paramString1, Type paramType, String paramString2) throws IOException {
/*  953 */     boolean bool = false;
/*      */     
/*  955 */     if (paramString2 != null) {
/*  956 */       paramIndentingWriter.p(paramString2 + " = ");
/*      */     }
/*      */     
/*  959 */     if (paramType.dimension().length() > 0 || paramType.asClassDoc() != null) {
/*  960 */       paramIndentingWriter.p("(" + paramType.toString() + ") " + paramString1 + ".readObject()");
/*  961 */       bool = true;
/*  962 */     } else if (paramType.typeName().equals("boolean")) {
/*  963 */       paramIndentingWriter.p(paramString1 + ".readBoolean()");
/*  964 */     } else if (paramType.typeName().equals("byte")) {
/*  965 */       paramIndentingWriter.p(paramString1 + ".readByte()");
/*  966 */     } else if (paramType.typeName().equals("char")) {
/*  967 */       paramIndentingWriter.p(paramString1 + ".readChar()");
/*  968 */     } else if (paramType.typeName().equals("short")) {
/*  969 */       paramIndentingWriter.p(paramString1 + ".readShort()");
/*  970 */     } else if (paramType.typeName().equals("int")) {
/*  971 */       paramIndentingWriter.p(paramString1 + ".readInt()");
/*  972 */     } else if (paramType.typeName().equals("long")) {
/*  973 */       paramIndentingWriter.p(paramString1 + ".readLong()");
/*  974 */     } else if (paramType.typeName().equals("float")) {
/*  975 */       paramIndentingWriter.p(paramString1 + ".readFloat()");
/*  976 */     } else if (paramType.typeName().equals("double")) {
/*  977 */       paramIndentingWriter.p(paramString1 + ".readDouble()");
/*      */     } else {
/*  979 */       throw new AssertionError(paramType);
/*      */     } 
/*      */     
/*  982 */     return bool;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static boolean writeUnmarshalArguments(IndentingWriter paramIndentingWriter, String paramString, Type[] paramArrayOfType, String[] paramArrayOfString) throws IOException {
/*  998 */     assert paramArrayOfType.length == paramArrayOfString.length;
/*      */     
/* 1000 */     boolean bool = false;
/* 1001 */     for (byte b = 0; b < paramArrayOfType.length; b++) {
/* 1002 */       if (writeUnmarshalArgument(paramIndentingWriter, paramString, paramArrayOfType[b], paramArrayOfString[b])) {
/* 1003 */         bool = true;
/*      */       }
/* 1005 */       paramIndentingWriter.pln(";");
/*      */     } 
/* 1007 */     return bool;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static String wrapArgumentCode(Type paramType, String paramString) {
/* 1021 */     if (paramType.dimension().length() > 0 || paramType.asClassDoc() != null)
/* 1022 */       return paramString; 
/* 1023 */     if (paramType.typeName().equals("boolean")) {
/* 1024 */       return "(" + paramString + " ? java.lang.Boolean.TRUE : java.lang.Boolean.FALSE)";
/*      */     }
/* 1026 */     if (paramType.typeName().equals("byte"))
/* 1027 */       return "new java.lang.Byte(" + paramString + ")"; 
/* 1028 */     if (paramType.typeName().equals("char"))
/* 1029 */       return "new java.lang.Character(" + paramString + ")"; 
/* 1030 */     if (paramType.typeName().equals("short"))
/* 1031 */       return "new java.lang.Short(" + paramString + ")"; 
/* 1032 */     if (paramType.typeName().equals("int"))
/* 1033 */       return "new java.lang.Integer(" + paramString + ")"; 
/* 1034 */     if (paramType.typeName().equals("long"))
/* 1035 */       return "new java.lang.Long(" + paramString + ")"; 
/* 1036 */     if (paramType.typeName().equals("float"))
/* 1037 */       return "new java.lang.Float(" + paramString + ")"; 
/* 1038 */     if (paramType.typeName().equals("double")) {
/* 1039 */       return "new java.lang.Double(" + paramString + ")";
/*      */     }
/* 1041 */     throw new AssertionError(paramType);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static String unwrapArgumentCode(Type paramType, String paramString) {
/* 1057 */     if (paramType.dimension().length() > 0 || paramType.asClassDoc() != null)
/* 1058 */       return "((" + paramType.toString() + ") " + paramString + ")"; 
/* 1059 */     if (paramType.typeName().equals("boolean"))
/* 1060 */       return "((java.lang.Boolean) " + paramString + ").booleanValue()"; 
/* 1061 */     if (paramType.typeName().equals("byte"))
/* 1062 */       return "((java.lang.Byte) " + paramString + ").byteValue()"; 
/* 1063 */     if (paramType.typeName().equals("char"))
/* 1064 */       return "((java.lang.Character) " + paramString + ").charValue()"; 
/* 1065 */     if (paramType.typeName().equals("short"))
/* 1066 */       return "((java.lang.Short) " + paramString + ").shortValue()"; 
/* 1067 */     if (paramType.typeName().equals("int"))
/* 1068 */       return "((java.lang.Integer) " + paramString + ").intValue()"; 
/* 1069 */     if (paramType.typeName().equals("long"))
/* 1070 */       return "((java.lang.Long) " + paramString + ").longValue()"; 
/* 1071 */     if (paramType.typeName().equals("float"))
/* 1072 */       return "((java.lang.Float) " + paramString + ").floatValue()"; 
/* 1073 */     if (paramType.typeName().equals("double")) {
/* 1074 */       return "((java.lang.Double) " + paramString + ").doubleValue()";
/*      */     }
/* 1076 */     throw new AssertionError(paramType);
/*      */   }
/*      */ }


/* Location:              C:\Program Files\Java\jdk1.8.0_211\lib\tools.jar!\sun\rmi\rmic\newrmic\jrmp\StubSkeletonWriter.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */