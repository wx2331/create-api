/*      */ package com.sun.tools.corba.se.idl;
/*      */ 
/*      */ import com.sun.tools.corba.se.idl.constExpr.And;
/*      */ import com.sun.tools.corba.se.idl.constExpr.BinaryExpr;
/*      */ import com.sun.tools.corba.se.idl.constExpr.Divide;
/*      */ import com.sun.tools.corba.se.idl.constExpr.EvaluationException;
/*      */ import com.sun.tools.corba.se.idl.constExpr.ExprFactory;
/*      */ import com.sun.tools.corba.se.idl.constExpr.Expression;
/*      */ import com.sun.tools.corba.se.idl.constExpr.Minus;
/*      */ import com.sun.tools.corba.se.idl.constExpr.Modulo;
/*      */ import com.sun.tools.corba.se.idl.constExpr.Negative;
/*      */ import com.sun.tools.corba.se.idl.constExpr.Not;
/*      */ import com.sun.tools.corba.se.idl.constExpr.Or;
/*      */ import com.sun.tools.corba.se.idl.constExpr.Plus;
/*      */ import com.sun.tools.corba.se.idl.constExpr.Positive;
/*      */ import com.sun.tools.corba.se.idl.constExpr.ShiftLeft;
/*      */ import com.sun.tools.corba.se.idl.constExpr.ShiftRight;
/*      */ import com.sun.tools.corba.se.idl.constExpr.Terminal;
/*      */ import com.sun.tools.corba.se.idl.constExpr.Times;
/*      */ import com.sun.tools.corba.se.idl.constExpr.Xor;
/*      */ import java.io.EOFException;
/*      */ import java.io.IOException;
/*      */ import java.math.BigInteger;
/*      */ import java.util.ArrayList;
/*      */ import java.util.Enumeration;
/*      */ import java.util.Hashtable;
/*      */ import java.util.Iterator;
/*      */ import java.util.List;
/*      */ import java.util.Stack;
/*      */ import java.util.Vector;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ class Parser
/*      */ {
/*      */   private boolean _isModuleLegalType;
/*      */   private static final int MAX_SHORT = 32767;
/*      */   private static final int MIN_SHORT = -32768;
/*      */   private static final int MAX_USHORT = 65535;
/*      */   UnionBranch defaultBranch;
/*      */   public static final String unknownNamePrefix = "uN__";
/*      */   static Hashtable symbolTable;
/*      */   Hashtable lcSymbolTable;
/*      */   static Hashtable overrideNames;
/*      */   Vector emitList;
/*      */   boolean emitAll;
/*      */   boolean cppModule;
/*      */   boolean noWarn;
/*      */   Scanner scanner;
/*      */   Hashtable symbols;
/*      */   Vector macros;
/*      */   Vector paths;
/*      */   SymtabEntry currentModule;
/*      */   
/*      */   Parser(Preprocessor paramPreprocessor, Arguments paramArguments, Hashtable paramHashtable1, Hashtable paramHashtable2, SymtabFactory paramSymtabFactory, ExprFactory paramExprFactory, String[] paramArrayOfString) {
/*  556 */     this._isModuleLegalType = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 2298 */     this.defaultBranch = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3851 */     this.lcSymbolTable = new Hashtable<>();
/*      */     
/* 3853 */     this.emitList = new Vector();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3863 */     this.macros = new Vector();
/*      */ 
/*      */ 
/*      */     
/* 3867 */     this.currentModule = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3883 */     this.sequence = 0;
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3888 */     this.parsingConditionalExpr = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3901 */     this.tokenHistory = new TokenBuffer();
/*      */     this.arguments = paramArguments;
/*      */     this.noWarn = paramArguments.noWarn;
/*      */     this.corbaLevel = paramArguments.corbaLevel;
/*      */     this.paths = paramArguments.includePaths;
/*      */     this.symbols = paramArguments.definedSymbols;
/*      */     this.verbose = paramArguments.verbose;
/*      */     this.emitAll = paramArguments.emitAll;
/*      */     this.cppModule = paramArguments.cppModule;
/*      */     overrideNames = (paramHashtable1 == null) ? new Hashtable<>() : paramHashtable1;
/*      */     symbolTable = (paramHashtable2 == null) ? new Hashtable<>() : paramHashtable2;
/*      */     this.keywords = (paramArrayOfString == null) ? new String[0] : paramArrayOfString;
/*      */     this.stFactory = paramSymtabFactory;
/*      */     this.exprFactory = paramExprFactory;
/*      */     this.currentModule = this.topLevelModule = new ModuleEntry();
/*      */     this.prep = paramPreprocessor;
/*      */     repIDStack.push(new IDLID());
/*      */     addPrimEntries();
/*      */   }
/*      */   
/*      */   void parse(String paramString) throws IOException {
/*      */     IncludeEntry includeEntry = this.stFactory.includeEntry();
/*      */     includeEntry.name('"' + paramString + '"');
/*      */     try {
/*      */       includeEntry.absFilename(Util.getAbsolutePath(paramString, this.paths));
/*      */     } catch (IOException iOException) {}
/*      */     this.scanner = new Scanner(includeEntry, this.keywords, this.verbose, this.emitAll, this.corbaLevel, this.arguments.scannerDebugFlag);
/*      */     this.topLevelModule.sourceFile(includeEntry);
/*      */     this.token = new Token(0);
/*      */     this.tokenHistory.insert(this.token);
/*      */     try {
/*      */       match(0);
/*      */       if (this.token.equals(999)) {
/*      */         ParseException.nothing(paramString);
/*      */       } else {
/*      */         specification(this.topLevelModule);
/*      */       } 
/*      */     } catch (ParseException parseException) {
/*      */     
/*      */     } catch (EOFException eOFException) {}
/*      */   }
/*      */   
/*      */   private void addPrimEntries() {
/*      */     symbolTable.put("short", this.stFactory.primitiveEntry("short"));
/*      */     symbolTable.put("long", this.stFactory.primitiveEntry("long"));
/*      */     symbolTable.put("long long", this.stFactory.primitiveEntry("long long"));
/*      */     symbolTable.put("unsigned short", this.stFactory.primitiveEntry("unsigned short"));
/*      */     symbolTable.put("unsigned long", this.stFactory.primitiveEntry("unsigned long"));
/*      */     symbolTable.put("unsigned long long", this.stFactory.primitiveEntry("unsigned long long"));
/*      */     symbolTable.put("char", this.stFactory.primitiveEntry("char"));
/*      */     symbolTable.put("wchar", this.stFactory.primitiveEntry("wchar"));
/*      */     symbolTable.put("float", this.stFactory.primitiveEntry("float"));
/*      */     symbolTable.put("double", this.stFactory.primitiveEntry("double"));
/*      */     symbolTable.put("boolean", this.stFactory.primitiveEntry("boolean"));
/*      */     symbolTable.put("octet", this.stFactory.primitiveEntry("octet"));
/*      */     symbolTable.put("any", this.stFactory.primitiveEntry("any"));
/*      */     InterfaceEntry interfaceEntry = this.stFactory.interfaceEntry();
/*      */     interfaceEntry.name("Object");
/*      */     symbolTable.put("Object", interfaceEntry);
/*      */     ValueEntry valueEntry = this.stFactory.valueEntry();
/*      */     valueEntry.name("ValueBase");
/*      */     symbolTable.put("ValueBase", valueEntry);
/*      */     this.lcSymbolTable.put("short", this.stFactory.primitiveEntry("short"));
/*      */     this.lcSymbolTable.put("long", this.stFactory.primitiveEntry("long"));
/*      */     this.lcSymbolTable.put("long long", this.stFactory.primitiveEntry("long long"));
/*      */     this.lcSymbolTable.put("unsigned short", this.stFactory.primitiveEntry("unsigned short"));
/*      */     this.lcSymbolTable.put("unsigned long", this.stFactory.primitiveEntry("unsigned long"));
/*      */     this.lcSymbolTable.put("unsigned long long", this.stFactory.primitiveEntry("unsigned long long"));
/*      */     this.lcSymbolTable.put("char", this.stFactory.primitiveEntry("char"));
/*      */     this.lcSymbolTable.put("wchar", this.stFactory.primitiveEntry("wchar"));
/*      */     this.lcSymbolTable.put("float", this.stFactory.primitiveEntry("float"));
/*      */     this.lcSymbolTable.put("double", this.stFactory.primitiveEntry("double"));
/*      */     this.lcSymbolTable.put("boolean", this.stFactory.primitiveEntry("boolean"));
/*      */     this.lcSymbolTable.put("octet", this.stFactory.primitiveEntry("octet"));
/*      */     this.lcSymbolTable.put("any", this.stFactory.primitiveEntry("any"));
/*      */     this.lcSymbolTable.put("object", interfaceEntry);
/*      */     this.lcSymbolTable.put("valuebase", valueEntry);
/*      */   }
/*      */   
/*      */   private void specification(ModuleEntry paramModuleEntry) throws IOException {
/*      */     while (!this.token.equals(999)) {
/*      */       definition(paramModuleEntry);
/*      */       addToEmitList(paramModuleEntry);
/*      */     } 
/*      */   }
/*      */   
/*      */   private void addToEmitList(ModuleEntry paramModuleEntry) {
/*      */     for (Enumeration<SymtabEntry> enumeration = paramModuleEntry.contained().elements(); enumeration.hasMoreElements(); ) {
/*      */       SymtabEntry symtabEntry = enumeration.nextElement();
/*      */       if (symtabEntry.emit()) {
/*      */         this.emitList.addElement(symtabEntry);
/*      */         if (symtabEntry instanceof ModuleEntry)
/*      */           checkContained((ModuleEntry)symtabEntry); 
/*      */         if (symtabEntry instanceof IncludeEntry) {
/*      */           this.includes.addElement(symtabEntry.name());
/*      */           this.includeEntries.addElement(symtabEntry);
/*      */         } 
/*      */         continue;
/*      */       } 
/*      */       if (symtabEntry instanceof ModuleEntry)
/*      */         checkContained((ModuleEntry)symtabEntry); 
/*      */     } 
/*      */     paramModuleEntry.contained().removeAllElements();
/*      */   }
/*      */   
/*      */   private void checkContained(ModuleEntry paramModuleEntry) {
/*      */     for (Enumeration<SymtabEntry> enumeration = paramModuleEntry.contained().elements(); enumeration.hasMoreElements(); ) {
/*      */       SymtabEntry symtabEntry = enumeration.nextElement();
/*      */       if (symtabEntry instanceof ModuleEntry)
/*      */         checkContained((ModuleEntry)symtabEntry); 
/*      */       if (symtabEntry.emit()) {
/*      */         if (!this.emitList.contains(paramModuleEntry))
/*      */           this.emitList.addElement(paramModuleEntry); 
/*      */         paramModuleEntry.emit(true);
/*      */         break;
/*      */       } 
/*      */     } 
/*      */   }
/*      */   
/*      */   private void definition(ModuleEntry paramModuleEntry) throws IOException {
/*      */     try {
/*      */       switch (this.token.type) {
/*      */         case 9:
/*      */         case 29:
/*      */         case 32:
/*      */         case 34:
/*      */           typeDcl(paramModuleEntry);
/*      */           break;
/*      */         case 5:
/*      */           constDcl(paramModuleEntry);
/*      */           break;
/*      */         case 19:
/*      */           nativeDcl(paramModuleEntry);
/*      */           break;
/*      */         case 10:
/*      */           exceptDcl(paramModuleEntry);
/*      */           break;
/*      */         case 16:
/*      */           interfaceProd(paramModuleEntry, 0);
/*      */           break;
/*      */         case 55:
/*      */           match(55);
/*      */           if (this.token.type == 16) {
/*      */             interfaceProd(paramModuleEntry, 2);
/*      */             break;
/*      */           } 
/*      */           throw ParseException.syntaxError(this.scanner, new int[] { 16 }, this.token.type);
/*      */         case 18:
/*      */           module(paramModuleEntry);
/*      */           break;
/*      */         case 39:
/*      */           match(39);
/*      */           if (this.token.type == 16) {
/*      */             interfaceProd(paramModuleEntry, 1);
/*      */             break;
/*      */           } 
/*      */           if (this.token.type == 46) {
/*      */             valueProd(paramModuleEntry, true);
/*      */             break;
/*      */           } 
/*      */           throw ParseException.syntaxError(this.scanner, new int[] { 16, 46 }, this.token.type);
/*      */         case 40:
/*      */         case 46:
/*      */           valueProd(paramModuleEntry, false);
/*      */           break;
/*      */         default:
/*      */           throw ParseException.syntaxError(this.scanner, new int[] { 32, 29, 34, 9, 5, 10, 16, 46, 18 }, this.token.type);
/*      */       } 
/*      */       match(100);
/*      */     } catch (ParseException parseException) {
/*      */       skipToSemicolon();
/*      */     } 
/*      */   }
/*      */   
/*      */   private void module(ModuleEntry paramModuleEntry) throws IOException, ParseException {
/*      */     match(18);
/*      */     repIDStack.push(((IDLID)repIDStack.peek()).clone());
/*      */     ModuleEntry moduleEntry = newModule(paramModuleEntry);
/*      */     ((IDLID)repIDStack.peek()).appendToName(moduleEntry.name());
/*      */     moduleEntry.comment((this.tokenHistory.lookBack(1)).comment);
/*      */     this.currentModule = moduleEntry;
/*      */     match(80);
/*      */     this.prep.openScope(moduleEntry);
/*      */     match(101);
/*      */     definition(moduleEntry);
/*      */     while (!this.token.equals(999) && !this.token.equals(102))
/*      */       definition(moduleEntry); 
/*      */     this.prep.closeScope(moduleEntry);
/*      */     match(102);
/*      */     this.currentModule = paramModuleEntry;
/*      */     repIDStack.pop();
/*      */   }
/*      */   
/*      */   private void interfaceProd(ModuleEntry paramModuleEntry, int paramInt) throws IOException, ParseException {
/*      */     match(16);
/*      */     String str = this.token.name;
/*      */     match(80);
/*      */     interface2(paramModuleEntry, str, paramInt);
/*      */   }
/*      */   
/*      */   private void interface2(ModuleEntry paramModuleEntry, String paramString, int paramInt) throws IOException, ParseException {
/*      */     if (this.token.type == 103 || this.token.type == 101) {
/*      */       repIDStack.push(((IDLID)repIDStack.peek()).clone());
/*      */       InterfaceEntry interfaceEntry = this.stFactory.interfaceEntry(paramModuleEntry, repIDStack.peek());
/*      */       interfaceEntry.sourceFile(this.scanner.fileEntry());
/*      */       interfaceEntry.name(paramString);
/*      */       interfaceEntry.setInterfaceType(paramInt);
/*      */       interfaceEntry.comment((this.tokenHistory.lookBack((interfaceEntry.getInterfaceType() == 0) ? 2 : 3)).comment);
/*      */       if (!ForwardEntry.replaceForwardDecl(interfaceEntry))
/*      */         ParseException.badAbstract(this.scanner, interfaceEntry.fullName()); 
/*      */       pigeonhole(paramModuleEntry, interfaceEntry);
/*      */       ((IDLID)repIDStack.peek()).appendToName(paramString);
/*      */       this.currentModule = interfaceEntry;
/*      */       interfaceDcl(interfaceEntry);
/*      */       this.currentModule = paramModuleEntry;
/*      */       repIDStack.pop();
/*      */     } else {
/*      */       ForwardEntry forwardEntry = this.stFactory.forwardEntry(paramModuleEntry, repIDStack.peek());
/*      */       forwardEntry.sourceFile(this.scanner.fileEntry());
/*      */       forwardEntry.name(paramString);
/*      */       forwardEntry.setInterfaceType(paramInt);
/*      */       forwardEntry.comment((this.tokenHistory.lookBack((forwardEntry.getInterfaceType() == 0) ? 2 : 3)).comment);
/*      */       pigeonhole(paramModuleEntry, forwardEntry);
/*      */     } 
/*      */   }
/*      */   
/*      */   private void interfaceDcl(InterfaceEntry paramInterfaceEntry) throws IOException, ParseException {
/*      */     if (this.token.type != 101) {
/*      */       inheritanceSpec(paramInterfaceEntry);
/*      */     } else if (!paramInterfaceEntry.isAbstract()) {
/*      */       SymtabEntry symtabEntry1 = qualifiedEntry("Object");
/*      */       SymtabEntry symtabEntry2 = typeOf(symtabEntry1);
/*      */       if (symtabEntry1 != null)
/*      */         if (!isInterface(symtabEntry2)) {
/*      */           ParseException.wrongType(this.scanner, overrideName("Object"), "interface", symtabEntry1.typeName());
/*      */         } else {
/*      */           paramInterfaceEntry.derivedFromAddElement(symtabEntry2, this.scanner);
/*      */         }  
/*      */     } 
/*      */     this.prep.openScope(paramInterfaceEntry);
/*      */     match(101);
/*      */     while (this.token.type != 102)
/*      */       export(paramInterfaceEntry); 
/*      */     this.prep.closeScope(paramInterfaceEntry);
/*      */     match(102);
/*      */   }
/*      */   
/*      */   private void export(InterfaceEntry paramInterfaceEntry) throws IOException {
/*      */     try {
/*      */       switch (this.token.type) {
/*      */         case 9:
/*      */         case 29:
/*      */         case 32:
/*      */         case 34:
/*      */           typeDcl(paramInterfaceEntry);
/*      */           break;
/*      */         case 5:
/*      */           constDcl(paramInterfaceEntry);
/*      */           break;
/*      */         case 19:
/*      */           nativeDcl(paramInterfaceEntry);
/*      */           break;
/*      */         case 10:
/*      */           exceptDcl(paramInterfaceEntry);
/*      */           break;
/*      */         case 1:
/*      */         case 25:
/*      */           attrDcl(paramInterfaceEntry);
/*      */           break;
/*      */         case 0:
/*      */         case 2:
/*      */         case 4:
/*      */         case 8:
/*      */         case 13:
/*      */         case 17:
/*      */         case 20:
/*      */         case 21:
/*      */         case 22:
/*      */         case 27:
/*      */         case 28:
/*      */         case 33:
/*      */         case 35:
/*      */         case 36:
/*      */         case 37:
/*      */         case 45:
/*      */         case 80:
/*      */         case 124:
/*      */           opDcl(paramInterfaceEntry);
/*      */           break;
/*      */         default:
/*      */           throw ParseException.syntaxError(this.scanner, new int[] { 
/*      */                 32, 29, 34, 9, 5, 10, 25, 1, 22, 13, 
/*      */                 8, 17, 27, 33, 4, 36, 2, 21, 0, 28, 
/*      */                 37, 80, 124, 35, 45 }, this.token.type);
/*      */       } 
/*      */       match(100);
/*      */     } catch (ParseException parseException) {
/*      */       skipToSemicolon();
/*      */     } 
/*      */   }
/*      */   
/*      */   private void inheritanceSpec(InterfaceEntry paramInterfaceEntry) throws IOException, ParseException {
/*      */     match(103);
/*      */     for (;; match(104)) {
/*      */       SymtabEntry symtabEntry1 = scopedName(paramInterfaceEntry.container(), this.stFactory.interfaceEntry());
/*      */       SymtabEntry symtabEntry2 = typeOf(symtabEntry1);
/*      */       if (isInterfaceOnly(symtabEntry2)) {
/*      */         boolean bool = symtabEntry2 instanceof InterfaceEntry;
/*      */         if (paramInterfaceEntry.derivedFrom().contains(symtabEntry2)) {
/*      */           ParseException.alreadyDerived(this.scanner, symtabEntry2.fullName(), paramInterfaceEntry.fullName());
/*      */         } else if (!paramInterfaceEntry.isAbstract() || ((InterfaceType)symtabEntry2).getInterfaceType() == 1) {
/*      */           paramInterfaceEntry.derivedFromAddElement(symtabEntry2, this.scanner);
/*      */         } else {
/*      */           ParseException.nonAbstractParent(this.scanner, paramInterfaceEntry.fullName(), symtabEntry1.fullName());
/*      */         } 
/*      */       } else if (isForward(symtabEntry2)) {
/*      */         ParseException.illegalForwardInheritance(this.scanner, paramInterfaceEntry.fullName(), symtabEntry1.fullName());
/*      */       } else {
/*      */         ParseException.wrongType(this.scanner, symtabEntry1.fullName(), "interface", entryName(symtabEntry1));
/*      */       } 
/*      */       if (symtabEntry1 instanceof InterfaceEntry && ((InterfaceEntry)symtabEntry1).state() != null)
/*      */         if (paramInterfaceEntry.state() == null) {
/*      */           paramInterfaceEntry.initState();
/*      */         } else {
/*      */           throw ParseException.badState(this.scanner, paramInterfaceEntry.fullName());
/*      */         }  
/*      */       if (this.token.type != 104)
/*      */         break; 
/*      */     } 
/*      */   }
/*      */   
/*      */   public boolean isModuleLegalType() {
/*      */     return this._isModuleLegalType;
/*      */   }
/*      */   
/*      */   public void isModuleLegalType(boolean paramBoolean) {
/*      */     this._isModuleLegalType = paramBoolean;
/*      */   }
/*      */   
/*      */   SymtabEntry scopedName(SymtabEntry paramSymtabEntry1, SymtabEntry paramSymtabEntry2) throws IOException, ParseException {
/*      */     return scopedName(paramSymtabEntry1, paramSymtabEntry2, true);
/*      */   }
/*      */   
/*      */   SymtabEntry scopedName(SymtabEntry paramSymtabEntry1, SymtabEntry paramSymtabEntry2, boolean paramBoolean) throws IOException, ParseException {
/*      */     boolean bool1 = false;
/*      */     boolean bool2 = false;
/*      */     String str = null;
/*      */     if (this.token.type == 124) {
/*      */       bool1 = true;
/*      */     } else if (this.token.type == 20) {
/*      */       str = "Object";
/*      */       match(20);
/*      */     } else if (this.token.type == 45) {
/*      */       str = "ValueBase";
/*      */       match(45);
/*      */     } else {
/*      */       str = this.token.name;
/*      */       match(80);
/*      */     } 
/*      */     while (this.token.type == 124) {
/*      */       match(124);
/*      */       bool2 = true;
/*      */       if (str != null) {
/*      */         str = str + '/' + this.token.name;
/*      */       } else {
/*      */         str = this.token.name;
/*      */       } 
/*      */       match(80);
/*      */     } 
/*      */     SymtabEntry symtabEntry = null;
/*      */     if (bool1) {
/*      */       symtabEntry = qualifiedEntry(str);
/*      */     } else if (bool2) {
/*      */       symtabEntry = partlyQualifiedEntry(str, paramSymtabEntry1);
/*      */     } else {
/*      */       symtabEntry = unqualifiedEntry(str, paramSymtabEntry1);
/*      */     } 
/*      */     if (symtabEntry == null) {
/*      */       (symtabEntry = paramSymtabEntry2).name(str);
/*      */     } else if (!symtabEntry.isReferencable() && paramBoolean) {
/*      */       throw ParseException.illegalIncompleteTypeReference(this.scanner, str);
/*      */     } 
/*      */     return symtabEntry;
/*      */   }
/*      */   
/*      */   private void valueProd(ModuleEntry paramModuleEntry, boolean paramBoolean) throws IOException, ParseException {
/*      */     boolean bool = (this.token.type == 40) ? true : false;
/*      */     if (bool)
/*      */       match(40); 
/*      */     match(46);
/*      */     String str = this.token.name;
/*      */     match(80);
/*      */     switch (this.token.type) {
/*      */       case 43:
/*      */       case 101:
/*      */       case 103:
/*      */         value2(paramModuleEntry, str, paramBoolean, bool);
/*      */         return;
/*      */       case 100:
/*      */         if (bool)
/*      */           break; 
/*      */         valueForwardDcl(paramModuleEntry, str, paramBoolean);
/*      */         return;
/*      */     } 
/*      */     if (bool)
/*      */       throw ParseException.badCustom(this.scanner); 
/*      */     if (paramBoolean)
/*      */       throw ParseException.abstractValueBox(this.scanner); 
/*      */     valueBox(paramModuleEntry, str);
/*      */   }
/*      */   
/*      */   private void value2(ModuleEntry paramModuleEntry, String paramString, boolean paramBoolean1, boolean paramBoolean2) throws IOException, ParseException {
/*      */     repIDStack.push(((IDLID)repIDStack.peek()).clone());
/*      */     ValueEntry valueEntry = this.stFactory.valueEntry(paramModuleEntry, repIDStack.peek());
/*      */     valueEntry.sourceFile(this.scanner.fileEntry());
/*      */     valueEntry.name(paramString);
/*      */     valueEntry.setInterfaceType(paramBoolean1 ? 1 : 0);
/*      */     valueEntry.setCustom(paramBoolean2);
/*      */     valueEntry.comment((this.tokenHistory.lookBack((paramBoolean1 || paramBoolean2) ? 3 : 2)).comment);
/*      */     if (!ForwardEntry.replaceForwardDecl(valueEntry))
/*      */       ParseException.badAbstract(this.scanner, valueEntry.fullName()); 
/*      */     pigeonhole(paramModuleEntry, valueEntry);
/*      */     ((IDLID)repIDStack.peek()).appendToName(paramString);
/*      */     this.currentModule = valueEntry;
/*      */     valueDcl(valueEntry);
/*      */     valueEntry.tagMethods();
/*      */     this.currentModule = paramModuleEntry;
/*      */     repIDStack.pop();
/*      */   }
/*      */   
/*      */   private void valueDcl(ValueEntry paramValueEntry) throws IOException, ParseException {
/*      */     if (this.token.type == 103) {
/*      */       valueInheritanceSpec(paramValueEntry);
/*      */     } else if (!paramValueEntry.isAbstract()) {
/*      */       SymtabEntry symtabEntry1 = qualifiedEntry("ValueBase");
/*      */       SymtabEntry symtabEntry2 = typeOf(symtabEntry1);
/*      */       if (symtabEntry1 != null)
/*      */         if (!isValue(symtabEntry2)) {
/*      */           ParseException.wrongType(this.scanner, overrideName("ValueBase"), "value", symtabEntry1.typeName());
/*      */         } else {
/*      */           paramValueEntry.derivedFromAddElement(symtabEntry2, false, this.scanner);
/*      */         }  
/*      */     } 
/*      */     if (this.token.type == 43)
/*      */       valueSupportsSpec(paramValueEntry); 
/*      */     this.prep.openScope(paramValueEntry);
/*      */     match(101);
/*      */     while (this.token.type != 102)
/*      */       valueElement(paramValueEntry); 
/*      */     this.prep.closeScope(paramValueEntry);
/*      */     match(102);
/*      */   }
/*      */   
/*      */   private void valueInheritanceSpec(ValueEntry paramValueEntry) throws IOException, ParseException {
/*      */     match(103);
/*      */     boolean bool = (this.token.type == 44) ? true : false;
/*      */     if (bool)
/*      */       match(44); 
/*      */     for (;; match(104), bool = false) {
/*      */       SymtabEntry symtabEntry1 = scopedName(paramValueEntry.container(), this.stFactory.valueEntry());
/*      */       SymtabEntry symtabEntry2 = typeOf(symtabEntry1);
/*      */       if (isValue(symtabEntry2) && !(symtabEntry2 instanceof ValueBoxEntry)) {
/*      */         paramValueEntry.derivedFromAddElement(symtabEntry2, bool, this.scanner);
/*      */       } else if (isForward(symtabEntry2)) {
/*      */         ParseException.illegalForwardInheritance(this.scanner, paramValueEntry.fullName(), symtabEntry1.fullName());
/*      */       } else {
/*      */         ParseException.wrongType(this.scanner, symtabEntry1.fullName(), "value", entryName(symtabEntry1));
/*      */       } 
/*      */       if (this.token.type != 104)
/*      */         break; 
/*      */     } 
/*      */   }
/*      */   
/*      */   private void valueSupportsSpec(ValueEntry paramValueEntry) throws IOException, ParseException {
/*      */     match(43);
/*      */     for (;; match(104)) {
/*      */       SymtabEntry symtabEntry1 = scopedName(paramValueEntry.container(), this.stFactory.interfaceEntry());
/*      */       SymtabEntry symtabEntry2 = typeOf(symtabEntry1);
/*      */       if (isInterface(symtabEntry2)) {
/*      */         paramValueEntry.derivedFromAddElement(symtabEntry2, this.scanner);
/*      */       } else {
/*      */         ParseException.wrongType(this.scanner, symtabEntry1.fullName(), "interface", entryName(symtabEntry1));
/*      */       } 
/*      */       if (this.token.type != 104)
/*      */         break; 
/*      */     } 
/*      */   }
/*      */   
/*      */   private void valueElement(ValueEntry paramValueEntry) throws IOException, ParseException {
/*      */     if (paramValueEntry.isAbstract()) {
/*      */       export(paramValueEntry);
/*      */     } else {
/*      */       switch (this.token.type) {
/*      */         case 41:
/*      */         case 42:
/*      */           valueStateMember(paramValueEntry);
/*      */           return;
/*      */         case 38:
/*      */         case 47:
/*      */           initDcl(paramValueEntry);
/*      */           return;
/*      */         case 0:
/*      */         case 1:
/*      */         case 2:
/*      */         case 4:
/*      */         case 5:
/*      */         case 8:
/*      */         case 9:
/*      */         case 10:
/*      */         case 13:
/*      */         case 17:
/*      */         case 19:
/*      */         case 20:
/*      */         case 21:
/*      */         case 22:
/*      */         case 25:
/*      */         case 27:
/*      */         case 28:
/*      */         case 29:
/*      */         case 32:
/*      */         case 33:
/*      */         case 34:
/*      */         case 35:
/*      */         case 36:
/*      */         case 37:
/*      */         case 45:
/*      */         case 80:
/*      */         case 124:
/*      */           export(paramValueEntry);
/*      */           return;
/*      */       } 
/*      */       throw ParseException.syntaxError(this.scanner, new int[] { 
/*      */             41, 42, 38, 45, 32, 29, 34, 9, 5, 10, 
/*      */             25, 1, 22, 13, 8, 17, 27, 33, 4, 36, 
/*      */             2, 21, 0, 28, 37, 80, 124, 35 }, this.token.type);
/*      */     } 
/*      */   }
/*      */   
/*      */   private void valueStateMember(ValueEntry paramValueEntry) throws IOException, ParseException {
/*      */     TypedefEntry typedefEntry = this.stFactory.typedefEntry(paramValueEntry, repIDStack.peek());
/*      */     typedefEntry.sourceFile(this.scanner.fileEntry());
/*      */     typedefEntry.comment(this.token.comment);
/*      */     boolean bool1 = (this.token.type == 42) ? true : false;
/*      */     if (bool1) {
/*      */       match(42);
/*      */     } else {
/*      */       match(41);
/*      */     } 
/*      */     boolean bool2 = (this.token.type == 29 || this.token.type == 34 || this.token.type == 9) ? true : false;
/*      */     typedefEntry.name("");
/*      */     typedefEntry.type(typeSpec(typedefEntry));
/*      */     addDeclarators(paramValueEntry, typedefEntry, bool1);
/*      */     if (bool2)
/*      */       paramValueEntry.addContained(typedefEntry); 
/*      */     match(100);
/*      */   }
/*      */   
/*      */   private void addDeclarators(ValueEntry paramValueEntry, TypedefEntry paramTypedefEntry, boolean paramBoolean) throws IOException, ParseException {
/*      */     boolean bool = paramBoolean ? true : false;
/*      */     try {
/*      */       Vector vector = new Vector();
/*      */       declarators(paramTypedefEntry, vector);
/*      */       for (Enumeration<TypedefEntry> enumeration = vector.elements(); enumeration.hasMoreElements();)
/*      */         paramValueEntry.addStateElement(new InterfaceState(bool, enumeration.nextElement()), this.scanner); 
/*      */     } catch (ParseException parseException) {
/*      */       skipToSemicolon();
/*      */     } 
/*      */   }
/*      */   
/*      */   private void initDcl(ValueEntry paramValueEntry) throws IOException, ParseException {
/*      */     MethodEntry methodEntry = this.stFactory.methodEntry(paramValueEntry, repIDStack.peek());
/*      */     methodEntry.sourceFile(this.scanner.fileEntry());
/*      */     methodEntry.comment(this.token.comment);
/*      */     repIDStack.push(((IDLID)repIDStack.peek()).clone());
/*      */     ((IDLID)repIDStack.peek()).appendToName(this.token.name);
/*      */     if (this.token.type == 38) {
/*      */       methodEntry.name("init");
/*      */       match(38);
/*      */       match(108);
/*      */     } else {
/*      */       match(47);
/*      */       methodEntry.name(this.token.name);
/*      */       if (this.token.type == 81) {
/*      */         match(81);
/*      */       } else {
/*      */         match(80);
/*      */         match(108);
/*      */       } 
/*      */     } 
/*      */     if (this.token.type != 109)
/*      */       while (true) {
/*      */         initParamDcl(methodEntry);
/*      */         if (this.token.type == 109)
/*      */           break; 
/*      */         match(104);
/*      */       }  
/*      */     paramValueEntry.initializersAddElement(methodEntry, this.scanner);
/*      */     match(109);
/*      */     match(100);
/*      */     repIDStack.pop();
/*      */   }
/*      */   
/*      */   private void initParamDcl(MethodEntry paramMethodEntry) throws IOException, ParseException {
/*      */     ParameterEntry parameterEntry = this.stFactory.parameterEntry(paramMethodEntry, repIDStack.peek());
/*      */     parameterEntry.sourceFile(this.scanner.fileEntry());
/*      */     parameterEntry.comment(this.token.comment);
/*      */     match(14);
/*      */     parameterEntry.passType(0);
/*      */     parameterEntry.type(paramTypeSpec(paramMethodEntry));
/*      */     parameterEntry.name(this.token.name);
/*      */     match(80);
/*      */     if (isntInList(paramMethodEntry.parameters(), parameterEntry.name()))
/*      */       paramMethodEntry.addParameter(parameterEntry); 
/*      */   }
/*      */   
/*      */   private void valueBox(ModuleEntry paramModuleEntry, String paramString) throws IOException, ParseException {
/*      */     repIDStack.push(((IDLID)repIDStack.peek()).clone());
/*      */     ValueBoxEntry valueBoxEntry = this.stFactory.valueBoxEntry(paramModuleEntry, repIDStack.peek());
/*      */     valueBoxEntry.sourceFile(this.scanner.fileEntry());
/*      */     valueBoxEntry.name(paramString);
/*      */     valueBoxEntry.comment((this.tokenHistory.lookBack(2)).comment);
/*      */     SymtabEntry symtabEntry = (SymtabEntry)symbolTable.get(valueBoxEntry.fullName());
/*      */     if (symtabEntry != null && symtabEntry instanceof ForwardEntry)
/*      */       ParseException.forwardedValueBox(this.scanner, valueBoxEntry.fullName()); 
/*      */     pigeonhole(paramModuleEntry, valueBoxEntry);
/*      */     ((IDLID)repIDStack.peek()).appendToName(paramString);
/*      */     this.currentModule = valueBoxEntry;
/*      */     TypedefEntry typedefEntry = this.stFactory.typedefEntry(valueBoxEntry, repIDStack.peek());
/*      */     typedefEntry.sourceFile(this.scanner.fileEntry());
/*      */     typedefEntry.comment(this.token.comment);
/*      */     boolean bool = (this.token.type == 29 || this.token.type == 34 || this.token.type == 9) ? true : false;
/*      */     typedefEntry.name("");
/*      */     typedefEntry.type(typeSpec(typedefEntry));
/*      */     if (typedefEntry.type() instanceof ValueBoxEntry)
/*      */       ParseException.nestedValueBox(this.scanner); 
/*      */     valueBoxEntry.addStateElement(new InterfaceState(2, typedefEntry), this.scanner);
/*      */     if (bool)
/*      */       valueBoxEntry.addContained(typedefEntry); 
/*      */     this.currentModule = paramModuleEntry;
/*      */     repIDStack.pop();
/*      */   }
/*      */   
/*      */   private void valueForwardDcl(ModuleEntry paramModuleEntry, String paramString, boolean paramBoolean) throws IOException, ParseException {
/*      */     ForwardValueEntry forwardValueEntry = this.stFactory.forwardValueEntry(paramModuleEntry, repIDStack.peek());
/*      */     forwardValueEntry.sourceFile(this.scanner.fileEntry());
/*      */     forwardValueEntry.name(paramString);
/*      */     forwardValueEntry.setInterfaceType(paramBoolean ? 1 : 0);
/*      */     forwardValueEntry.comment((this.tokenHistory.lookBack(paramBoolean ? 3 : 2)).comment);
/*      */     pigeonhole(paramModuleEntry, forwardValueEntry);
/*      */   }
/*      */   
/*      */   private void nativeDcl(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     match(19);
/*      */     NativeEntry nativeEntry = this.stFactory.nativeEntry(paramSymtabEntry, repIDStack.peek());
/*      */     nativeEntry.sourceFile(this.scanner.fileEntry());
/*      */     nativeEntry.comment((this.tokenHistory.lookBack(1)).comment);
/*      */     nativeEntry.name(this.token.name);
/*      */     match(80);
/*      */     pigeonhole(paramSymtabEntry, nativeEntry);
/*      */   }
/*      */   
/*      */   private void constDcl(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     match(5);
/*      */     ConstEntry constEntry = this.stFactory.constEntry(paramSymtabEntry, repIDStack.peek());
/*      */     constEntry.sourceFile(this.scanner.fileEntry());
/*      */     constEntry.comment((this.tokenHistory.lookBack(1)).comment);
/*      */     constType(constEntry);
/*      */     constEntry.name(this.token.name);
/*      */     match(80);
/*      */     match(105);
/*      */     constEntry.value(constExp(constEntry));
/*      */     verifyConstType(constEntry.value(), typeOf(constEntry.type()));
/*      */     pigeonhole(paramSymtabEntry, constEntry);
/*      */   }
/*      */   
/*      */   private void constType(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     SymtabEntry symtabEntry;
/*      */     switch (this.token.type) {
/*      */       case 21:
/*      */         paramSymtabEntry.type(octetType());
/*      */         return;
/*      */       case 17:
/*      */       case 27:
/*      */       case 33:
/*      */         paramSymtabEntry.type(integerType(paramSymtabEntry));
/*      */         return;
/*      */       case 4:
/*      */       case 36:
/*      */         paramSymtabEntry.type(charType());
/*      */         return;
/*      */       case 2:
/*      */         paramSymtabEntry.type(booleanType());
/*      */         return;
/*      */       case 8:
/*      */       case 13:
/*      */         paramSymtabEntry.type(floatingPtType());
/*      */         return;
/*      */       case 28:
/*      */       case 37:
/*      */         paramSymtabEntry.type(stringType(paramSymtabEntry));
/*      */         return;
/*      */       case 80:
/*      */       case 124:
/*      */         paramSymtabEntry.type(scopedName(paramSymtabEntry.container(), this.stFactory.primitiveEntry()));
/*      */         if (hasArrayInfo(paramSymtabEntry.type()))
/*      */           ParseException.illegalArray(this.scanner, "const"); 
/*      */         symtabEntry = typeOf(paramSymtabEntry.type());
/*      */         if (!(symtabEntry instanceof PrimitiveEntry) && !(symtabEntry instanceof StringEntry)) {
/*      */           ParseException.wrongType(this.scanner, paramSymtabEntry.fullName(), "primitive or string", entryName(paramSymtabEntry.type()));
/*      */           paramSymtabEntry.type(qualifiedEntry("long"));
/*      */         } else if (symtabEntry instanceof PrimitiveEntry) {
/*      */           String str = overrideName("any");
/*      */           if (symtabEntry.name().equals(str)) {
/*      */             ParseException.wrongType(this.scanner, paramSymtabEntry.fullName(), "primitive or string (except " + str + ')', str);
/*      */             paramSymtabEntry.type(qualifiedEntry("long"));
/*      */           } 
/*      */         } 
/*      */         return;
/*      */     } 
/*      */     throw ParseException.syntaxError(this.scanner, new int[] { 
/*      */           17, 27, 33, 4, 36, 2, 13, 8, 28, 37, 
/*      */           80, 124 }, this.token.type);
/*      */   }
/*      */   
/*      */   private boolean hasArrayInfo(SymtabEntry paramSymtabEntry) {
/*      */     while (paramSymtabEntry instanceof TypedefEntry) {
/*      */       if (((TypedefEntry)paramSymtabEntry).arrayInfo().size() != 0)
/*      */         return true; 
/*      */       paramSymtabEntry = paramSymtabEntry.type();
/*      */     } 
/*      */     return false;
/*      */   }
/*      */   
/*      */   public static String overrideName(String paramString) {
/*      */     String str = (String)overrideNames.get(paramString);
/*      */     return (str == null) ? paramString : str;
/*      */   }
/*      */   
/*      */   private void verifyConstType(Expression paramExpression, SymtabEntry paramSymtabEntry) {
/*      */     Object object = paramExpression.value();
/*      */     if (object instanceof BigInteger) {
/*      */       verifyIntegral((Number)object, paramSymtabEntry);
/*      */     } else if (object instanceof String) {
/*      */       verifyString(paramExpression, paramSymtabEntry);
/*      */     } else if (object instanceof Boolean) {
/*      */       verifyBoolean(paramSymtabEntry);
/*      */     } else if (object instanceof Character) {
/*      */       verifyCharacter(paramExpression, paramSymtabEntry);
/*      */     } else if (object instanceof Float || object instanceof Double) {
/*      */       verifyFloat((Number)object, paramSymtabEntry);
/*      */     } else if (object instanceof ConstEntry) {
/*      */       verifyConstType(((ConstEntry)object).value(), paramSymtabEntry);
/*      */     } else {
/*      */       ParseException.wrongExprType(this.scanner, paramSymtabEntry.fullName(), (object == null) ? "" : object.toString());
/*      */     } 
/*      */   }
/*      */   
/*      */   private void verifyIntegral(Number paramNumber, SymtabEntry paramSymtabEntry) {
/*      */     boolean bool = false;
/*      */     if (paramSymtabEntry == qualifiedEntry("octet")) {
/*      */       if (paramNumber.longValue() > 255L || paramNumber.longValue() < 0L)
/*      */         bool = true; 
/*      */     } else if (paramSymtabEntry == qualifiedEntry("long")) {
/*      */       if (paramNumber.longValue() > 2147483647L || paramNumber.longValue() < -2147483648L)
/*      */         bool = true; 
/*      */     } else if (paramSymtabEntry == qualifiedEntry("short")) {
/*      */       if (paramNumber.intValue() > 32767 || paramNumber.intValue() < -32768)
/*      */         bool = true; 
/*      */     } else if (paramSymtabEntry == qualifiedEntry("unsigned long")) {
/*      */       if (paramNumber.longValue() > 4294967295L || paramNumber.longValue() < 0L)
/*      */         bool = true; 
/*      */     } else if (paramSymtabEntry == qualifiedEntry("unsigned short")) {
/*      */       if (paramNumber.intValue() > 65535 || paramNumber.intValue() < 0)
/*      */         bool = true; 
/*      */     } else if (paramSymtabEntry == qualifiedEntry("long long")) {
/*      */       BigInteger bigInteger1 = BigInteger.valueOf(Long.MAX_VALUE);
/*      */       BigInteger bigInteger2 = BigInteger.valueOf(Long.MIN_VALUE);
/*      */       if (((BigInteger)paramNumber).compareTo(bigInteger1) > 0 || ((BigInteger)paramNumber).compareTo(bigInteger2) < 0)
/*      */         bool = true; 
/*      */     } else if (paramSymtabEntry == qualifiedEntry("unsigned long long")) {
/*      */       BigInteger bigInteger1 = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(2L)).add(BigInteger.valueOf(1L));
/*      */       BigInteger bigInteger2 = BigInteger.valueOf(0L);
/*      */       if (((BigInteger)paramNumber).compareTo(bigInteger1) > 0 || ((BigInteger)paramNumber).compareTo(bigInteger2) < 0)
/*      */         bool = true; 
/*      */     } else {
/*      */       String str = null;
/*      */       str = "long";
/*      */       ParseException.wrongExprType(this.scanner, paramSymtabEntry.fullName(), str);
/*      */     } 
/*      */     if (bool)
/*      */       ParseException.outOfRange(this.scanner, paramNumber.toString(), paramSymtabEntry.fullName()); 
/*      */   }
/*      */   
/*      */   private void verifyString(Expression paramExpression, SymtabEntry paramSymtabEntry) {
/*      */     String str = (String)paramExpression.value();
/*      */     if (!(paramSymtabEntry instanceof StringEntry)) {
/*      */       ParseException.wrongExprType(this.scanner, paramSymtabEntry.fullName(), paramExpression.type());
/*      */     } else if (((StringEntry)paramSymtabEntry).maxSize() != null) {
/*      */       Expression expression = ((StringEntry)paramSymtabEntry).maxSize();
/*      */       try {
/*      */         Number number = (Number)expression.value();
/*      */         if (str.length() > number.intValue())
/*      */           ParseException.stringTooLong(this.scanner, str, number.toString()); 
/*      */       } catch (Exception exception) {}
/*      */     } 
/*      */     if (!paramExpression.type().equals(paramSymtabEntry.name()))
/*      */       ParseException.wrongExprType(this.scanner, paramSymtabEntry.name(), paramExpression.type()); 
/*      */   }
/*      */   
/*      */   private void verifyBoolean(SymtabEntry paramSymtabEntry) {
/*      */     if (!paramSymtabEntry.name().equals(overrideName("boolean")))
/*      */       ParseException.wrongExprType(this.scanner, paramSymtabEntry.name(), "boolean"); 
/*      */   }
/*      */   
/*      */   private void verifyCharacter(Expression paramExpression, SymtabEntry paramSymtabEntry) {
/*      */     if ((!paramSymtabEntry.name().equals(overrideName("char")) && !paramSymtabEntry.name().equals(overrideName("wchar"))) || !paramSymtabEntry.name().equals(paramExpression.type()))
/*      */       ParseException.wrongExprType(this.scanner, paramSymtabEntry.fullName(), paramExpression.type()); 
/*      */   }
/*      */   
/*      */   private void verifyFloat(Number paramNumber, SymtabEntry paramSymtabEntry) {
/*      */     boolean bool = false;
/*      */     if (paramSymtabEntry.name().equals(overrideName("float"))) {
/*      */       double d = (paramNumber.doubleValue() < 0.0D) ? (paramNumber.doubleValue() * -1.0D) : paramNumber.doubleValue();
/*      */       if (d != 0.0D && (d > 3.4028234663852886E38D || d < 1.401298464324817E-45D))
/*      */         bool = true; 
/*      */     } else if (!paramSymtabEntry.name().equals(overrideName("double"))) {
/*      */       ParseException.wrongExprType(this.scanner, paramSymtabEntry.fullName(), (paramNumber instanceof Float) ? "float" : "double");
/*      */     } 
/*      */     if (bool)
/*      */       ParseException.outOfRange(this.scanner, paramNumber.toString(), paramSymtabEntry.fullName()); 
/*      */   }
/*      */   
/*      */   Expression constExp(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     Expression expression = orExpr(null, paramSymtabEntry);
/*      */     if (expression.type() == null)
/*      */       expression.type(paramSymtabEntry.typeName()); 
/*      */     try {
/*      */       expression.evaluate();
/*      */       if (expression instanceof Terminal && expression.value() instanceof BigInteger && (overrideName(expression.type()).equals("float") || overrideName(expression.type()).indexOf("double") >= 0))
/*      */         expression.value(new Double(((BigInteger)expression.value()).doubleValue())); 
/*      */     } catch (EvaluationException evaluationException) {
/*      */       ParseException.evaluationError(this.scanner, evaluationException.toString());
/*      */     } 
/*      */     return expression;
/*      */   }
/*      */   
/*      */   private Expression orExpr(Expression paramExpression, SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     if (paramExpression == null) {
/*      */       paramExpression = xorExpr(null, paramSymtabEntry);
/*      */     } else {
/*      */       BinaryExpr binaryExpr = (BinaryExpr)paramExpression;
/*      */       binaryExpr.right(xorExpr(null, paramSymtabEntry));
/*      */       paramExpression.rep(paramExpression.rep() + binaryExpr.right().rep());
/*      */     } 
/*      */     if (this.token.equals(117)) {
/*      */       match(this.token.type);
/*      */       Or or = this.exprFactory.or(paramExpression, null);
/*      */       or.type(paramSymtabEntry.typeName());
/*      */       or.rep(paramExpression.rep() + " | ");
/*      */       return orExpr((Expression)or, paramSymtabEntry);
/*      */     } 
/*      */     return paramExpression;
/*      */   }
/*      */   
/*      */   private Expression xorExpr(Expression paramExpression, SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     if (paramExpression == null) {
/*      */       paramExpression = andExpr(null, paramSymtabEntry);
/*      */     } else {
/*      */       BinaryExpr binaryExpr = (BinaryExpr)paramExpression;
/*      */       binaryExpr.right(andExpr(null, paramSymtabEntry));
/*      */       paramExpression.rep(paramExpression.rep() + binaryExpr.right().rep());
/*      */     } 
/*      */     if (this.token.equals(118)) {
/*      */       match(this.token.type);
/*      */       Xor xor = this.exprFactory.xor(paramExpression, null);
/*      */       xor.rep(paramExpression.rep() + " ^ ");
/*      */       xor.type(paramSymtabEntry.typeName());
/*      */       return xorExpr((Expression)xor, paramSymtabEntry);
/*      */     } 
/*      */     return paramExpression;
/*      */   }
/*      */   
/*      */   private Expression andExpr(Expression paramExpression, SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     if (paramExpression == null) {
/*      */       paramExpression = shiftExpr(null, paramSymtabEntry);
/*      */     } else {
/*      */       BinaryExpr binaryExpr = (BinaryExpr)paramExpression;
/*      */       binaryExpr.right(shiftExpr(null, paramSymtabEntry));
/*      */       paramExpression.rep(paramExpression.rep() + binaryExpr.right().rep());
/*      */     } 
/*      */     if (this.token.equals(119)) {
/*      */       match(this.token.type);
/*      */       And and = this.exprFactory.and(paramExpression, null);
/*      */       and.rep(paramExpression.rep() + " & ");
/*      */       and.type(paramSymtabEntry.typeName());
/*      */       return andExpr((Expression)and, paramSymtabEntry);
/*      */     } 
/*      */     return paramExpression;
/*      */   }
/*      */   
/*      */   private Expression shiftExpr(Expression paramExpression, SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     if (paramExpression == null) {
/*      */       paramExpression = addExpr(null, paramSymtabEntry);
/*      */     } else {
/*      */       BinaryExpr binaryExpr = (BinaryExpr)paramExpression;
/*      */       binaryExpr.right(addExpr(null, paramSymtabEntry));
/*      */       paramExpression.rep(paramExpression.rep() + binaryExpr.right().rep());
/*      */     } 
/*      */     if (this.token.equals(125)) {
/*      */       match(this.token.type);
/*      */       ShiftLeft shiftLeft = this.exprFactory.shiftLeft(paramExpression, null);
/*      */       shiftLeft.type(paramSymtabEntry.typeName());
/*      */       shiftLeft.rep(paramExpression.rep() + " << ");
/*      */       return shiftExpr((Expression)shiftLeft, paramSymtabEntry);
/*      */     } 
/*      */     if (this.token.equals(126)) {
/*      */       match(this.token.type);
/*      */       ShiftRight shiftRight = this.exprFactory.shiftRight(paramExpression, null);
/*      */       shiftRight.type(paramSymtabEntry.typeName());
/*      */       shiftRight.rep(paramExpression.rep() + " >> ");
/*      */       return shiftExpr((Expression)shiftRight, paramSymtabEntry);
/*      */     } 
/*      */     return paramExpression;
/*      */   }
/*      */   
/*      */   private Expression addExpr(Expression paramExpression, SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     if (paramExpression == null) {
/*      */       paramExpression = multExpr(null, paramSymtabEntry);
/*      */     } else {
/*      */       BinaryExpr binaryExpr = (BinaryExpr)paramExpression;
/*      */       binaryExpr.right(multExpr(null, paramSymtabEntry));
/*      */       paramExpression.rep(paramExpression.rep() + binaryExpr.right().rep());
/*      */     } 
/*      */     if (this.token.equals(106)) {
/*      */       match(this.token.type);
/*      */       Plus plus = this.exprFactory.plus(paramExpression, null);
/*      */       plus.type(paramSymtabEntry.typeName());
/*      */       plus.rep(paramExpression.rep() + " + ");
/*      */       return addExpr((Expression)plus, paramSymtabEntry);
/*      */     } 
/*      */     if (this.token.equals(107)) {
/*      */       match(this.token.type);
/*      */       Minus minus = this.exprFactory.minus(paramExpression, null);
/*      */       minus.type(paramSymtabEntry.typeName());
/*      */       minus.rep(paramExpression.rep() + " - ");
/*      */       return addExpr((Expression)minus, paramSymtabEntry);
/*      */     } 
/*      */     return paramExpression;
/*      */   }
/*      */   
/*      */   private Expression multExpr(Expression paramExpression, SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     if (paramExpression == null) {
/*      */       paramExpression = unaryExpr(paramSymtabEntry);
/*      */     } else {
/*      */       BinaryExpr binaryExpr = (BinaryExpr)paramExpression;
/*      */       binaryExpr.right(unaryExpr(paramSymtabEntry));
/*      */       paramExpression.rep(paramExpression.rep() + binaryExpr.right().rep());
/*      */     } 
/*      */     if (this.token.equals(120)) {
/*      */       match(this.token.type);
/*      */       Times times = this.exprFactory.times(paramExpression, null);
/*      */       times.type(paramSymtabEntry.typeName());
/*      */       times.rep(paramExpression.rep() + " * ");
/*      */       return multExpr((Expression)times, paramSymtabEntry);
/*      */     } 
/*      */     if (this.token.equals(121)) {
/*      */       match(this.token.type);
/*      */       Divide divide = this.exprFactory.divide(paramExpression, null);
/*      */       divide.type(paramSymtabEntry.typeName());
/*      */       divide.rep(paramExpression.rep() + " / ");
/*      */       return multExpr((Expression)divide, paramSymtabEntry);
/*      */     } 
/*      */     if (this.token.equals(122)) {
/*      */       match(this.token.type);
/*      */       Modulo modulo = this.exprFactory.modulo(paramExpression, null);
/*      */       modulo.type(paramSymtabEntry.typeName());
/*      */       modulo.rep(paramExpression.rep() + " % ");
/*      */       return multExpr((Expression)modulo, paramSymtabEntry);
/*      */     } 
/*      */     return paramExpression;
/*      */   }
/*      */   
/*      */   private Expression unaryExpr(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     if (this.token.equals(106)) {
/*      */       match(this.token.type);
/*      */       Expression expression = primaryExpr(paramSymtabEntry);
/*      */       Positive positive = this.exprFactory.positive(expression);
/*      */       positive.type(paramSymtabEntry.typeName());
/*      */       positive.rep('+' + expression.rep());
/*      */       return (Expression)positive;
/*      */     } 
/*      */     if (this.token.equals(107)) {
/*      */       match(this.token.type);
/*      */       Expression expression = primaryExpr(paramSymtabEntry);
/*      */       Negative negative = this.exprFactory.negative(expression);
/*      */       negative.type(paramSymtabEntry.typeName());
/*      */       negative.rep('-' + expression.rep());
/*      */       return (Expression)negative;
/*      */     } 
/*      */     if (this.token.equals(123)) {
/*      */       match(this.token.type);
/*      */       Expression expression = primaryExpr(paramSymtabEntry);
/*      */       Not not = this.exprFactory.not(expression);
/*      */       not.type(paramSymtabEntry.typeName());
/*      */       not.rep('~' + expression.rep());
/*      */       return (Expression)not;
/*      */     } 
/*      */     return primaryExpr(paramSymtabEntry);
/*      */   }
/*      */   
/*      */   private Expression primaryExpr(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     Expression expression = null;
/*      */     if (this.parsingConditionalExpr) {
/*      */       this.prep.token = this.token;
/*      */       expression = this.prep.primaryExpr(paramSymtabEntry);
/*      */       this.token = this.prep.token;
/*      */     } else {
/*      */       Terminal terminal;
/*      */       ConstEntry constEntry;
/*      */       SymtabEntry symtabEntry;
/*      */       switch (this.token.type) {
/*      */         case 80:
/*      */         case 124:
/*      */           constEntry = this.stFactory.constEntry();
/*      */           constEntry.value((Expression)this.exprFactory.terminal("1", BigInteger.valueOf(1L)));
/*      */           symtabEntry = scopedName(paramSymtabEntry.container(), constEntry);
/*      */           if (!(symtabEntry instanceof ConstEntry)) {
/*      */             ParseException.invalidConst(this.scanner, symtabEntry.fullName());
/*      */             terminal = this.exprFactory.terminal("1", BigInteger.valueOf(1L));
/*      */           } else {
/*      */             terminal = this.exprFactory.terminal((ConstEntry)symtabEntry);
/*      */           } 
/*      */           return (Expression)terminal;
/*      */         case 200:
/*      */         case 201:
/*      */         case 202:
/*      */         case 203:
/*      */         case 204:
/*      */           expression = literal(paramSymtabEntry);
/*      */           return expression;
/*      */         case 108:
/*      */           match(108);
/*      */           expression = constExp(paramSymtabEntry);
/*      */           match(109);
/*      */           expression.rep('(' + expression.rep() + ')');
/*      */           return expression;
/*      */       } 
/*      */       throw ParseException.syntaxError(this.scanner, new int[] { 80, 124, 205, 108 }, this.token.type);
/*      */     } 
/*      */     return expression;
/*      */   }
/*      */   
/*      */   Expression literal(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     boolean bool;
/*      */     String str = this.token.name;
/*      */     Terminal terminal = null;
/*      */     switch (this.token.type) {
/*      */       case 202:
/*      */         match(202);
/*      */         try {
/*      */           terminal = this.exprFactory.terminal(str, parseString(str));
/*      */           terminal.type(paramSymtabEntry.typeName());
/*      */         } catch (NumberFormatException numberFormatException) {
/*      */           ParseException.notANumber(this.scanner, str);
/*      */           terminal = this.exprFactory.terminal("0", BigInteger.valueOf(0L));
/*      */         } 
/*      */         return (Expression)terminal;
/*      */       case 201:
/*      */         bool = this.token.isWide();
/*      */         match(201);
/*      */         terminal = this.exprFactory.terminal("'" + str.substring(1) + "'", new Character(str.charAt(0)), bool);
/*      */         return (Expression)terminal;
/*      */       case 203:
/*      */         match(203);
/*      */         try {
/*      */           terminal = this.exprFactory.terminal(str, new Double(str));
/*      */           terminal.type(paramSymtabEntry.typeName());
/*      */         } catch (NumberFormatException numberFormatException) {
/*      */           ParseException.notANumber(this.scanner, str);
/*      */         } 
/*      */         return (Expression)terminal;
/*      */       case 200:
/*      */         terminal = booleanLiteral();
/*      */         return (Expression)terminal;
/*      */       case 204:
/*      */         return stringLiteral();
/*      */     } 
/*      */     throw ParseException.syntaxError(this.scanner, 205, this.token.type);
/*      */   }
/*      */   
/*      */   private BigInteger parseString(String paramString) throws NumberFormatException {
/*      */     byte b = 10;
/*      */     if (paramString.length() > 1 && paramString.charAt(0) == '0')
/*      */       if (paramString.charAt(1) == 'x' || paramString.charAt(1) == 'X') {
/*      */         paramString = paramString.substring(2);
/*      */         b = 16;
/*      */       } else {
/*      */         b = 8;
/*      */       }  
/*      */     return new BigInteger(paramString, b);
/*      */   }
/*      */   
/*      */   private Terminal booleanLiteral() throws IOException, ParseException {
/*      */     Boolean bool = null;
/*      */     if (this.token.name.equals("TRUE")) {
/*      */       bool = new Boolean(true);
/*      */     } else if (this.token.name.equals("FALSE")) {
/*      */       bool = new Boolean(false);
/*      */     } else {
/*      */       ParseException.invalidConst(this.scanner, this.token.name);
/*      */       bool = new Boolean(false);
/*      */     } 
/*      */     String str = this.token.name;
/*      */     match(200);
/*      */     return this.exprFactory.terminal(str, bool);
/*      */   }
/*      */   
/*      */   private Expression stringLiteral() throws IOException, ParseException {
/*      */     boolean bool = this.token.isWide();
/*      */     String str = "";
/*      */     while (true) {
/*      */       str = str + this.token.name;
/*      */       match(204);
/*      */       if (!this.token.equals(204)) {
/*      */         Terminal terminal = this.exprFactory.terminal(str, bool);
/*      */         terminal.rep('"' + str + '"');
/*      */         return (Expression)terminal;
/*      */       } 
/*      */     } 
/*      */   }
/*      */   
/*      */   private Expression positiveIntConst(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     Terminal terminal;
/*      */     Expression expression = constExp(paramSymtabEntry);
/*      */     Object object = expression.value();
/*      */     while (object instanceof ConstEntry)
/*      */       object = ((ConstEntry)object).value().value(); 
/*      */     if (!(object instanceof Number) || object instanceof Float || object instanceof Double) {
/*      */       ParseException.notPositiveInt(this.scanner, expression.rep());
/*      */       terminal = this.exprFactory.terminal("1", BigInteger.valueOf(1L));
/*      */     } else if (((BigInteger)object).compareTo(BigInteger.valueOf(0L)) <= 0) {
/*      */       ParseException.notPositiveInt(this.scanner, object.toString());
/*      */       terminal = this.exprFactory.terminal("1", BigInteger.valueOf(1L));
/*      */     } 
/*      */     return (Expression)terminal;
/*      */   }
/*      */   
/*      */   private SymtabEntry typeDcl(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     switch (this.token.type) {
/*      */       case 32:
/*      */         match(32);
/*      */         return typeDeclarator(paramSymtabEntry);
/*      */       case 29:
/*      */         return structType(paramSymtabEntry);
/*      */       case 34:
/*      */         return unionType(paramSymtabEntry);
/*      */       case 9:
/*      */         return enumType(paramSymtabEntry);
/*      */     } 
/*      */     throw ParseException.syntaxError(this.scanner, new int[] { 32, 29, 34, 9 }, this.token.type);
/*      */   }
/*      */   
/*      */   private TypedefEntry typeDeclarator(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     TypedefEntry typedefEntry = this.stFactory.typedefEntry(paramSymtabEntry, repIDStack.peek());
/*      */     typedefEntry.sourceFile(this.scanner.fileEntry());
/*      */     typedefEntry.comment((this.tokenHistory.lookBack(1)).comment);
/*      */     typedefEntry.type(typeSpec(paramSymtabEntry));
/*      */     Vector vector = new Vector();
/*      */     declarators(typedefEntry, vector);
/*      */     for (Enumeration<SymtabEntry> enumeration = vector.elements(); enumeration.hasMoreElements();)
/*      */       pigeonhole(paramSymtabEntry, enumeration.nextElement()); 
/*      */     return typedefEntry;
/*      */   }
/*      */   
/*      */   private SymtabEntry typeSpec(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     return (this.token.type == 29 || this.token.type == 34 || this.token.type == 9) ? constrTypeSpec(paramSymtabEntry) : simpleTypeSpec(paramSymtabEntry, true);
/*      */   }
/*      */   
/*      */   private SymtabEntry simpleTypeSpec(SymtabEntry paramSymtabEntry, boolean paramBoolean) throws IOException, ParseException {
/*      */     if (this.token.type == 80 || this.token.type == 124 || this.token.type == 20 || this.token.type == 45) {
/*      */       SymtabEntry symtabEntry = (paramSymtabEntry instanceof InterfaceEntry || paramSymtabEntry instanceof ModuleEntry || paramSymtabEntry instanceof StructEntry || paramSymtabEntry instanceof UnionEntry) ? paramSymtabEntry : paramSymtabEntry.container();
/*      */       return scopedName(symtabEntry, this.stFactory.primitiveEntry(), paramBoolean);
/*      */     } 
/*      */     return (this.token.type == 26 || this.token.type == 28 || this.token.type == 37) ? templateTypeSpec(paramSymtabEntry) : baseTypeSpec(paramSymtabEntry);
/*      */   }
/*      */   
/*      */   private SymtabEntry baseTypeSpec(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     switch (this.token.type) {
/*      */       case 8:
/*      */       case 13:
/*      */         return floatingPtType();
/*      */       case 17:
/*      */       case 27:
/*      */       case 33:
/*      */         return integerType(paramSymtabEntry);
/*      */       case 4:
/*      */       case 36:
/*      */         return charType();
/*      */       case 2:
/*      */         return booleanType();
/*      */       case 21:
/*      */         return octetType();
/*      */       case 0:
/*      */         return anyType();
/*      */     } 
/*      */     throw ParseException.syntaxError(this.scanner, new int[] { 13, 8, 17, 27, 33, 4, 36, 2, 21, 0 }, this.token.type);
/*      */   }
/*      */   
/*      */   private SymtabEntry templateTypeSpec(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     switch (this.token.type) {
/*      */       case 26:
/*      */         return sequenceType(paramSymtabEntry);
/*      */       case 28:
/*      */       case 37:
/*      */         return stringType(paramSymtabEntry);
/*      */     } 
/*      */     throw ParseException.syntaxError(this.scanner, new int[] { 26, 28, 37 }, this.token.type);
/*      */   }
/*      */   
/*      */   private SymtabEntry constrTypeSpec(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     switch (this.token.type) {
/*      */       case 29:
/*      */         return structType(paramSymtabEntry);
/*      */       case 34:
/*      */         return unionType(paramSymtabEntry);
/*      */       case 9:
/*      */         return enumType(paramSymtabEntry);
/*      */     } 
/*      */     throw ParseException.syntaxError(this.scanner, new int[] { 29, 34, 9 }, this.token.type);
/*      */   }
/*      */   
/*      */   private void declarators(TypedefEntry paramTypedefEntry, Vector<TypedefEntry> paramVector) throws IOException, ParseException {
/*      */     for (;; match(104)) {
/*      */       TypedefEntry typedefEntry = (TypedefEntry)paramTypedefEntry.clone();
/*      */       declarator(typedefEntry);
/*      */       if (isntInList(paramVector, typedefEntry.name()))
/*      */         paramVector.addElement(typedefEntry); 
/*      */       if (this.token.type != 104)
/*      */         break; 
/*      */     } 
/*      */   }
/*      */   
/*      */   private void declarator(TypedefEntry paramTypedefEntry) throws IOException, ParseException {
/*      */     paramTypedefEntry.name(this.token.name);
/*      */     if (!this.token.comment.text().equals(""))
/*      */       paramTypedefEntry.comment(this.token.comment); 
/*      */     match(80);
/*      */     while (this.token.type == 112)
/*      */       fixedArraySize(paramTypedefEntry); 
/*      */   }
/*      */   
/*      */   private PrimitiveEntry floatingPtType() throws IOException, ParseException {
/*      */     String str = "double";
/*      */     if (this.token.type == 13) {
/*      */       match(13);
/*      */       str = "float";
/*      */     } else if (this.token.type == 8) {
/*      */       match(8);
/*      */     } else {
/*      */       int[] arrayOfInt = { 13, 8 };
/*      */       ParseException.syntaxError(this.scanner, new int[] { 13, 8 }, this.token.type);
/*      */     } 
/*      */     PrimitiveEntry primitiveEntry = null;
/*      */     try {
/*      */       primitiveEntry = (PrimitiveEntry)qualifiedEntry(str);
/*      */     } catch (ClassCastException classCastException) {
/*      */       ParseException.undeclaredType(this.scanner, str);
/*      */     } 
/*      */     return primitiveEntry;
/*      */   }
/*      */   
/*      */   private PrimitiveEntry integerType(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     String str = "";
/*      */     if (this.token.type == 33) {
/*      */       match(33);
/*      */       str = "unsigned ";
/*      */     } 
/*      */     str = str + signedInt();
/*      */     PrimitiveEntry primitiveEntry = null;
/*      */     try {
/*      */       primitiveEntry = (PrimitiveEntry)qualifiedEntry(str);
/*      */     } catch (ClassCastException classCastException) {
/*      */       ParseException.undeclaredType(this.scanner, str);
/*      */     } 
/*      */     return primitiveEntry;
/*      */   }
/*      */   
/*      */   private String signedInt() throws IOException, ParseException {
/*      */     String str = "long";
/*      */     if (this.token.type == 17) {
/*      */       match(17);
/*      */       if (this.token.type == 17) {
/*      */         str = "long long";
/*      */         match(17);
/*      */       } 
/*      */     } else if (this.token.type == 27) {
/*      */       str = "short";
/*      */       match(27);
/*      */     } else {
/*      */       ParseException.syntaxError(this.scanner, new int[] { 17, 27 }, this.token.type);
/*      */     } 
/*      */     return str;
/*      */   }
/*      */   
/*      */   private PrimitiveEntry charType() throws IOException, ParseException {
/*      */     String str;
/*      */     if (this.token.type == 4) {
/*      */       match(4);
/*      */       str = "char";
/*      */     } else {
/*      */       match(36);
/*      */       str = "wchar";
/*      */     } 
/*      */     PrimitiveEntry primitiveEntry = null;
/*      */     try {
/*      */       primitiveEntry = (PrimitiveEntry)qualifiedEntry(str);
/*      */     } catch (ClassCastException classCastException) {
/*      */       ParseException.undeclaredType(this.scanner, overrideName(str));
/*      */     } 
/*      */     return primitiveEntry;
/*      */   }
/*      */   
/*      */   private PrimitiveEntry booleanType() throws IOException, ParseException {
/*      */     PrimitiveEntry primitiveEntry = null;
/*      */     match(2);
/*      */     try {
/*      */       primitiveEntry = (PrimitiveEntry)qualifiedEntry("boolean");
/*      */     } catch (ClassCastException classCastException) {
/*      */       ParseException.undeclaredType(this.scanner, overrideName("boolean"));
/*      */     } 
/*      */     return primitiveEntry;
/*      */   }
/*      */   
/*      */   private PrimitiveEntry octetType() throws IOException, ParseException {
/*      */     PrimitiveEntry primitiveEntry = null;
/*      */     match(21);
/*      */     try {
/*      */       primitiveEntry = (PrimitiveEntry)qualifiedEntry("octet");
/*      */     } catch (ClassCastException classCastException) {
/*      */       ParseException.undeclaredType(this.scanner, overrideName("octet"));
/*      */     } 
/*      */     return primitiveEntry;
/*      */   }
/*      */   
/*      */   private SymtabEntry anyType() throws IOException, ParseException {
/*      */     match(0);
/*      */     try {
/*      */       return qualifiedEntry("any");
/*      */     } catch (ClassCastException classCastException) {
/*      */       ParseException.undeclaredType(this.scanner, overrideName("any"));
/*      */       return null;
/*      */     } 
/*      */   }
/*      */   
/*      */   private StructEntry structType(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     match(29);
/*      */     String str = this.token.name;
/*      */     match(80);
/*      */     StructEntry structEntry = null;
/*      */     if (this.token.type == 101) {
/*      */       repIDStack.push(((IDLID)repIDStack.peek()).clone());
/*      */       structEntry = makeStructEntry(str, paramSymtabEntry, false);
/*      */       ((IDLID)repIDStack.peek()).appendToName(str);
/*      */       this.prep.openScope(structEntry);
/*      */       match(101);
/*      */       member(structEntry);
/*      */       memberList2(structEntry);
/*      */       this.prep.closeScope(structEntry);
/*      */       match(102);
/*      */       repIDStack.pop();
/*      */     } else if (this.token.equals(100)) {
/*      */       structEntry = makeStructEntry(str, paramSymtabEntry, true);
/*      */     } else {
/*      */       throw ParseException.syntaxError(this.scanner, new int[] { 100, 101 }, this.token.type);
/*      */     } 
/*      */     return structEntry;
/*      */   }
/*      */   
/*      */   private StructEntry makeStructEntry(String paramString, SymtabEntry paramSymtabEntry, boolean paramBoolean) {
/*      */     StructEntry structEntry = this.stFactory.structEntry(paramSymtabEntry, repIDStack.peek());
/*      */     structEntry.isReferencable(!paramBoolean);
/*      */     structEntry.sourceFile(this.scanner.fileEntry());
/*      */     structEntry.name(paramString);
/*      */     structEntry.comment((this.tokenHistory.lookBack(1)).comment);
/*      */     pigeonhole(paramSymtabEntry, structEntry);
/*      */     return structEntry;
/*      */   }
/*      */   
/*      */   private void memberList2(StructEntry paramStructEntry) throws IOException {
/*      */     while (this.token.type != 102)
/*      */       member(paramStructEntry); 
/*      */   }
/*      */   
/*      */   private void member(StructEntry paramStructEntry) throws IOException {
/*      */     TypedefEntry typedefEntry = this.stFactory.typedefEntry(paramStructEntry, repIDStack.peek());
/*      */     typedefEntry.sourceFile(this.scanner.fileEntry());
/*      */     typedefEntry.comment(this.token.comment);
/*      */     try {
/*      */       typedefEntry.type(typeSpec(paramStructEntry));
/*      */       if (typedefEntry.type() == paramStructEntry)
/*      */         throw ParseException.recursive(this.scanner, paramStructEntry.fullName(), (this.token.name == null) ? "" : this.token.name); 
/*      */       if (typeOf(typedefEntry) instanceof ExceptionEntry)
/*      */         throw ParseException.illegalException(this.scanner, entryName(paramStructEntry)); 
/*      */       declarators(typedefEntry, paramStructEntry.members());
/*      */       match(100);
/*      */     } catch (ParseException parseException) {
/*      */       skipToSemicolon();
/*      */     } 
/*      */   }
/*      */   
/*      */   private final boolean isConstTypeSpec(Token paramToken) {
/*      */     return (paramToken.type == 29 || paramToken.type == 34 || paramToken.type == 9);
/*      */   }
/*      */   
/*      */   private UnionEntry unionType(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     match(34);
/*      */     String str = this.token.name;
/*      */     match(80);
/*      */     UnionEntry unionEntry = null;
/*      */     if (this.token.type == 30) {
/*      */       repIDStack.push(((IDLID)repIDStack.peek()).clone());
/*      */       unionEntry = makeUnionEntry(str, paramSymtabEntry, false);
/*      */       ((IDLID)repIDStack.peek()).appendToName(str);
/*      */       match(30);
/*      */       match(108);
/*      */       unionEntry.type(switchTypeSpec(unionEntry));
/*      */       match(109);
/*      */       this.prep.openScope(unionEntry);
/*      */       match(101);
/*      */       switchBody(unionEntry);
/*      */       verifyUnion(unionEntry);
/*      */       this.prep.closeScope(unionEntry);
/*      */       match(102);
/*      */       repIDStack.pop();
/*      */     } else if (this.token.equals(100)) {
/*      */       unionEntry = makeUnionEntry(str, paramSymtabEntry, true);
/*      */     } else {
/*      */       throw ParseException.syntaxError(this.scanner, new int[] { 100, 30 }, this.token.type);
/*      */     } 
/*      */     return unionEntry;
/*      */   }
/*      */   
/*      */   private UnionEntry makeUnionEntry(String paramString, SymtabEntry paramSymtabEntry, boolean paramBoolean) {
/*      */     UnionEntry unionEntry = this.stFactory.unionEntry(paramSymtabEntry, repIDStack.peek());
/*      */     unionEntry.isReferencable(!paramBoolean);
/*      */     unionEntry.sourceFile(this.scanner.fileEntry());
/*      */     unionEntry.name(paramString);
/*      */     unionEntry.comment((this.tokenHistory.lookBack(1)).comment);
/*      */     pigeonhole(paramSymtabEntry, unionEntry);
/*      */     return unionEntry;
/*      */   }
/*      */   
/*      */   private void verifyUnion(UnionEntry paramUnionEntry) {
/*      */     if (paramUnionEntry.typeName().equals(overrideName("boolean"))) {
/*      */       if (caseCount(paramUnionEntry) > 2L)
/*      */         ParseException.noDefault(this.scanner); 
/*      */     } else if (paramUnionEntry.type() instanceof EnumEntry) {
/*      */       if (caseCount(paramUnionEntry) > ((EnumEntry)paramUnionEntry.type()).elements().size())
/*      */         ParseException.noDefault(this.scanner); 
/*      */     } 
/*      */   }
/*      */   
/*      */   private long caseCount(UnionEntry paramUnionEntry) {
/*      */     long l = 0L;
/*      */     Enumeration<UnionBranch> enumeration = paramUnionEntry.branches().elements();
/*      */     while (enumeration.hasMoreElements()) {
/*      */       UnionBranch unionBranch = enumeration.nextElement();
/*      */       l += unionBranch.labels.size();
/*      */       if (unionBranch.isDefault)
/*      */         l++; 
/*      */     } 
/*      */     return l;
/*      */   }
/*      */   
/*      */   private SymtabEntry switchTypeSpec(UnionEntry paramUnionEntry) throws IOException, ParseException {
/*      */     SymtabEntry symtabEntry2, symtabEntry1 = null;
/*      */     switch (this.token.type) {
/*      */       case 17:
/*      */       case 27:
/*      */       case 33:
/*      */         return integerType(paramUnionEntry);
/*      */       case 4:
/*      */       case 36:
/*      */         return charType();
/*      */       case 2:
/*      */         return booleanType();
/*      */       case 9:
/*      */         return enumType(paramUnionEntry);
/*      */       case 80:
/*      */       case 124:
/*      */         symtabEntry1 = scopedName(paramUnionEntry, this.stFactory.primitiveEntry());
/*      */         if (hasArrayInfo(paramUnionEntry.type()))
/*      */           ParseException.illegalArray(this.scanner, "switch"); 
/*      */         symtabEntry2 = typeOf(symtabEntry1);
/*      */         if (!(symtabEntry2 instanceof EnumEntry) && !(symtabEntry2 instanceof PrimitiveEntry)) {
/*      */           ParseException.wrongType(this.scanner, symtabEntry1.fullName(), "long, unsigned long, short, unsigned short, char, boolean, enum", entryName(symtabEntry1.type()));
/*      */         } else if (symtabEntry1 instanceof PrimitiveEntry) {
/*      */           SymtabEntry symtabEntry3 = qualifiedEntry("octet");
/*      */           SymtabEntry symtabEntry4 = qualifiedEntry("float");
/*      */           SymtabEntry symtabEntry5 = qualifiedEntry("double");
/*      */           if (symtabEntry2 == symtabEntry3 || symtabEntry2 == symtabEntry4 || symtabEntry2 == symtabEntry5)
/*      */             ParseException.wrongType(this.scanner, symtabEntry1.fullName(), "long, unsigned long, short, unsigned short, char, boolean, enum", entryName(symtabEntry1.type())); 
/*      */         } 
/*      */         return symtabEntry1;
/*      */     } 
/*      */     throw ParseException.syntaxError(this.scanner, new int[] { 17, 27, 33, 4, 2, 9, 80, 124 }, this.token.type);
/*      */   }
/*      */   
/*      */   private void switchBody(UnionEntry paramUnionEntry) throws IOException, ParseException {
/*      */     caseProd(paramUnionEntry);
/*      */     while (!this.token.equals(102))
/*      */       caseProd(paramUnionEntry); 
/*      */     paramUnionEntry.defaultBranch((this.defaultBranch == null) ? null : this.defaultBranch.typedef);
/*      */     this.defaultBranch = null;
/*      */   }
/*      */   
/*      */   private void caseProd(UnionEntry paramUnionEntry) throws IOException, ParseException {
/*      */     UnionBranch unionBranch = new UnionBranch();
/*      */     paramUnionEntry.addBranch(unionBranch);
/*      */     caseLabel(paramUnionEntry, unionBranch);
/*      */     while (this.token.equals(3) || this.token.equals(7))
/*      */       caseLabel(paramUnionEntry, unionBranch); 
/*      */     elementSpec(paramUnionEntry, unionBranch);
/*      */     match(100);
/*      */   }
/*      */   
/*      */   private void caseLabel(UnionEntry paramUnionEntry, UnionBranch paramUnionBranch) throws IOException, ParseException {
/*      */     if (this.token.type == 3) {
/*      */       Expression expression;
/*      */       match(3);
/*      */       ConstEntry constEntry = this.stFactory.constEntry(paramUnionEntry, repIDStack.peek());
/*      */       constEntry.sourceFile(this.scanner.fileEntry());
/*      */       constEntry.type(paramUnionEntry);
/*      */       SymtabEntry symtabEntry = typeOf(paramUnionEntry.type());
/*      */       if (symtabEntry instanceof EnumEntry) {
/*      */         expression = matchEnum((EnumEntry)symtabEntry);
/*      */       } else {
/*      */         expression = constExp(constEntry);
/*      */         verifyConstType(expression, symtabEntry);
/*      */       } 
/*      */       if (paramUnionEntry.has(expression))
/*      */         ParseException.branchLabel(this.scanner, expression.rep()); 
/*      */       paramUnionBranch.labels.addElement(expression);
/*      */       match(103);
/*      */     } else if (this.token.type == 7) {
/*      */       match(7);
/*      */       match(103);
/*      */       if (paramUnionEntry.defaultBranch() != null)
/*      */         ParseException.alreadyDefaulted(this.scanner); 
/*      */       paramUnionBranch.isDefault = true;
/*      */       this.defaultBranch = paramUnionBranch;
/*      */     } else {
/*      */       throw ParseException.syntaxError(this.scanner, new int[] { 3, 7 }, this.token.type);
/*      */     } 
/*      */   }
/*      */   
/*      */   private Expression matchEnum(EnumEntry paramEnumEntry) throws IOException, ParseException {
/*      */     SymtabEntry symtabEntry = scopedName(paramEnumEntry.container(), new SymtabEntry());
/*      */     return (Expression)this.exprFactory.terminal(symtabEntry.name(), false);
/*      */   }
/*      */   
/*      */   private void elementSpec(UnionEntry paramUnionEntry, UnionBranch paramUnionBranch) throws IOException, ParseException {
/*      */     TypedefEntry typedefEntry = this.stFactory.typedefEntry(paramUnionEntry, repIDStack.peek());
/*      */     typedefEntry.sourceFile(this.scanner.fileEntry());
/*      */     typedefEntry.comment(this.token.comment);
/*      */     typedefEntry.type(typeSpec(paramUnionEntry));
/*      */     if (typedefEntry.type() == paramUnionEntry)
/*      */       throw ParseException.recursive(this.scanner, paramUnionEntry.fullName(), (this.token.name == null) ? "" : this.token.name); 
/*      */     if (typeOf(typedefEntry) instanceof ExceptionEntry)
/*      */       throw ParseException.illegalException(this.scanner, entryName(paramUnionEntry)); 
/*      */     declarator(typedefEntry);
/*      */     paramUnionBranch.typedef = typedefEntry;
/*      */     if (paramUnionEntry.has(typedefEntry))
/*      */       ParseException.branchName(this.scanner, typedefEntry.name()); 
/*      */   }
/*      */   
/*      */   private EnumEntry enumType(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     match(9);
/*      */     EnumEntry enumEntry = newEnumEntry(paramSymtabEntry);
/*      */     enumEntry.comment((this.tokenHistory.lookBack(1)).comment);
/*      */     enumEntry.name(this.token.name);
/*      */     match(80);
/*      */     this.prep.openScope(enumEntry);
/*      */     match(101);
/*      */     if (isntInStringList(enumEntry.elements(), this.token.name)) {
/*      */       enumEntry.addElement(this.token.name);
/*      */       SymtabEntry symtabEntry = new SymtabEntry(paramSymtabEntry, repIDStack.peek());
/*      */       if (symtabEntry.module().equals("")) {
/*      */         symtabEntry.module(symtabEntry.name());
/*      */       } else if (!symtabEntry.name().equals("")) {
/*      */         symtabEntry.module(symtabEntry.module() + "/" + symtabEntry.name());
/*      */       } 
/*      */       symtabEntry.name(this.token.name);
/*      */       pigeonhole(enumEntry.container(), symtabEntry);
/*      */     } 
/*      */     match(80);
/*      */     enumType2(enumEntry);
/*      */     this.prep.closeScope(enumEntry);
/*      */     match(102);
/*      */     return enumEntry;
/*      */   }
/*      */   
/*      */   private void enumType2(EnumEntry paramEnumEntry) throws IOException, ParseException {
/*      */     while (this.token.type == 104) {
/*      */       match(104);
/*      */       String str = this.token.name;
/*      */       match(80);
/*      */       if (isntInStringList(paramEnumEntry.elements(), str)) {
/*      */         paramEnumEntry.addElement(str);
/*      */         SymtabEntry symtabEntry = new SymtabEntry(paramEnumEntry.container(), repIDStack.peek());
/*      */         if (symtabEntry.module().equals("")) {
/*      */           symtabEntry.module(symtabEntry.name());
/*      */         } else if (!symtabEntry.name().equals("")) {
/*      */           symtabEntry.module(symtabEntry.module() + "/" + symtabEntry.name());
/*      */         } 
/*      */         symtabEntry.name(str);
/*      */         pigeonhole(paramEnumEntry.container(), symtabEntry);
/*      */       } 
/*      */     } 
/*      */   }
/*      */   
/*      */   private SequenceEntry sequenceType(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     match(26);
/*      */     match(110);
/*      */     SequenceEntry sequenceEntry = newSequenceEntry(paramSymtabEntry);
/*      */     SymtabEntry symtabEntry = simpleTypeSpec(sequenceEntry, false);
/*      */     sequenceEntry.type(symtabEntry);
/*      */     if (!symtabEntry.isReferencable())
/*      */       try {
/*      */         List<SequenceEntry> list = (List)symtabEntry.dynamicVariable(ftlKey);
/*      */         if (list == null) {
/*      */           list = new ArrayList();
/*      */           symtabEntry.dynamicVariable(ftlKey, list);
/*      */         } 
/*      */         list.add(sequenceEntry);
/*      */       } catch (NoSuchFieldException noSuchFieldException) {
/*      */         throw new IllegalStateException();
/*      */       }  
/*      */     if (this.token.type == 104) {
/*      */       match(104);
/*      */       ConstEntry constEntry = this.stFactory.constEntry(sequenceEntry, repIDStack.peek());
/*      */       constEntry.sourceFile(this.scanner.fileEntry());
/*      */       constEntry.type(qualifiedEntry("long"));
/*      */       sequenceEntry.maxSize(positiveIntConst(constEntry));
/*      */       verifyConstType(sequenceEntry.maxSize(), qualifiedEntry("long"));
/*      */     } 
/*      */     match(111);
/*      */     return sequenceEntry;
/*      */   }
/*      */   
/*      */   private StringEntry stringType(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     StringEntry stringEntry = this.stFactory.stringEntry();
/*      */     if (this.token.type == 28) {
/*      */       stringEntry.name(overrideName("string"));
/*      */       match(28);
/*      */     } else {
/*      */       stringEntry.name(overrideName("wstring"));
/*      */       match(37);
/*      */     } 
/*      */     stringEntry.maxSize(stringType2(paramSymtabEntry));
/*      */     return stringEntry;
/*      */   }
/*      */   
/*      */   private Expression stringType2(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     if (this.token.type == 110) {
/*      */       match(110);
/*      */       ConstEntry constEntry = this.stFactory.constEntry(paramSymtabEntry, repIDStack.peek());
/*      */       constEntry.sourceFile(this.scanner.fileEntry());
/*      */       constEntry.type(qualifiedEntry("long"));
/*      */       Expression expression = positiveIntConst(constEntry);
/*      */       verifyConstType(expression, qualifiedEntry("long"));
/*      */       match(111);
/*      */       return expression;
/*      */     } 
/*      */     return null;
/*      */   }
/*      */   
/*      */   private void fixedArraySize(TypedefEntry paramTypedefEntry) throws IOException, ParseException {
/*      */     match(112);
/*      */     ConstEntry constEntry = this.stFactory.constEntry(paramTypedefEntry, repIDStack.peek());
/*      */     constEntry.sourceFile(this.scanner.fileEntry());
/*      */     constEntry.type(qualifiedEntry("long"));
/*      */     Expression expression = positiveIntConst(constEntry);
/*      */     paramTypedefEntry.addArrayInfo(expression);
/*      */     verifyConstType(expression, qualifiedEntry("long"));
/*      */     match(113);
/*      */   }
/*      */   
/*      */   private void attrDcl(InterfaceEntry paramInterfaceEntry) throws IOException, ParseException {
/*      */     AttributeEntry attributeEntry = this.stFactory.attributeEntry(paramInterfaceEntry, repIDStack.peek());
/*      */     attributeEntry.sourceFile(this.scanner.fileEntry());
/*      */     attributeEntry.comment(this.token.comment);
/*      */     Comment comment = attributeEntry.comment();
/*      */     if (this.token.type == 25) {
/*      */       match(25);
/*      */       attributeEntry.readOnly(true);
/*      */     } 
/*      */     match(1);
/*      */     attributeEntry.type(paramTypeSpec(attributeEntry));
/*      */     attributeEntry.name(this.token.name);
/*      */     if (!this.token.comment.text().equals(""))
/*      */       attributeEntry.comment(this.token.comment); 
/*      */     paramInterfaceEntry.methodsAddElement(attributeEntry, this.scanner);
/*      */     pigeonholeMethod(paramInterfaceEntry, attributeEntry);
/*      */     if (!this.token.comment.text().equals("")) {
/*      */       AttributeEntry attributeEntry1 = (AttributeEntry)attributeEntry.clone();
/*      */       attributeEntry1.comment(comment);
/*      */       match(80);
/*      */       attrDcl2(paramInterfaceEntry, attributeEntry1);
/*      */     } else {
/*      */       match(80);
/*      */       attrDcl2(paramInterfaceEntry, attributeEntry);
/*      */     } 
/*      */   }
/*      */   
/*      */   private void attrDcl2(InterfaceEntry paramInterfaceEntry, AttributeEntry paramAttributeEntry) throws IOException, ParseException {
/*      */     while (this.token.type == 104) {
/*      */       match(104);
/*      */       AttributeEntry attributeEntry = (AttributeEntry)paramAttributeEntry.clone();
/*      */       attributeEntry.name(this.token.name);
/*      */       if (!this.token.comment.text().equals(""))
/*      */         attributeEntry.comment(this.token.comment); 
/*      */       paramInterfaceEntry.methodsAddElement(attributeEntry, this.scanner);
/*      */       pigeonholeMethod(paramInterfaceEntry, attributeEntry);
/*      */       match(80);
/*      */     } 
/*      */   }
/*      */   
/*      */   private void exceptDcl(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     match(10);
/*      */     repIDStack.push(((IDLID)repIDStack.peek()).clone());
/*      */     ExceptionEntry exceptionEntry = this.stFactory.exceptionEntry(paramSymtabEntry, repIDStack.peek());
/*      */     ((IDLID)repIDStack.peek()).appendToName(this.token.name);
/*      */     exceptionEntry.sourceFile(this.scanner.fileEntry());
/*      */     exceptionEntry.comment((this.tokenHistory.lookBack(1)).comment);
/*      */     exceptionEntry.name(this.token.name);
/*      */     match(80);
/*      */     pigeonhole(paramSymtabEntry, exceptionEntry);
/*      */     if (this.token.equals(101)) {
/*      */       this.prep.openScope(exceptionEntry);
/*      */       match(101);
/*      */       memberList2(exceptionEntry);
/*      */       this.prep.closeScope(exceptionEntry);
/*      */       match(102);
/*      */       repIDStack.pop();
/*      */     } else {
/*      */       throw ParseException.syntaxError(this.scanner, 101, this.token.type);
/*      */     } 
/*      */   }
/*      */   
/*      */   private void opDcl(InterfaceEntry paramInterfaceEntry) throws IOException, ParseException {
/*      */     MethodEntry methodEntry = this.stFactory.methodEntry(paramInterfaceEntry, repIDStack.peek());
/*      */     methodEntry.sourceFile(this.scanner.fileEntry());
/*      */     methodEntry.comment(this.token.comment);
/*      */     if (this.token.type == 22) {
/*      */       match(22);
/*      */       methodEntry.oneway(true);
/*      */     } 
/*      */     methodEntry.type(opTypeSpec(methodEntry));
/*      */     repIDStack.push(((IDLID)repIDStack.peek()).clone());
/*      */     ((IDLID)repIDStack.peek()).appendToName(this.token.name);
/*      */     methodEntry.name(this.token.name);
/*      */     paramInterfaceEntry.methodsAddElement(methodEntry, this.scanner);
/*      */     pigeonholeMethod(paramInterfaceEntry, methodEntry);
/*      */     opDcl2(methodEntry);
/*      */     if (methodEntry.oneway())
/*      */       checkIfOpLegalForOneway(methodEntry); 
/*      */     repIDStack.pop();
/*      */   }
/*      */   
/*      */   private void checkIfOpLegalForOneway(MethodEntry paramMethodEntry) {
/*      */     boolean bool = false;
/*      */     if (paramMethodEntry.type() != null || paramMethodEntry.exceptions().size() != 0) {
/*      */       bool = true;
/*      */     } else {
/*      */       for (Enumeration<ParameterEntry> enumeration = paramMethodEntry.parameters().elements(); enumeration.hasMoreElements();) {
/*      */         if (((ParameterEntry)enumeration.nextElement()).passType() != 0) {
/*      */           bool = true;
/*      */           break;
/*      */         } 
/*      */       } 
/*      */     } 
/*      */     if (bool)
/*      */       ParseException.oneway(this.scanner, paramMethodEntry.name()); 
/*      */   }
/*      */   
/*      */   private void opDcl2(MethodEntry paramMethodEntry) throws IOException, ParseException {
/*      */     if (this.token.equals(81)) {
/*      */       match(81);
/*      */       parameterDcls2(paramMethodEntry);
/*      */     } else {
/*      */       match(80);
/*      */       parameterDcls(paramMethodEntry);
/*      */     } 
/*      */     opDcl3(paramMethodEntry);
/*      */   }
/*      */   
/*      */   private void opDcl3(MethodEntry paramMethodEntry) throws IOException, ParseException {
/*      */     if (this.token.type != 100) {
/*      */       if (!this.token.equals(24) && !this.token.equals(6))
/*      */         throw ParseException.syntaxError(this.scanner, new int[] { 24, 6, 100 }, this.token.type); 
/*      */       if (this.token.type == 24)
/*      */         raisesExpr(paramMethodEntry); 
/*      */       if (this.token.type == 6)
/*      */         contextExpr(paramMethodEntry); 
/*      */     } 
/*      */   }
/*      */   
/*      */   private SymtabEntry opTypeSpec(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     SymtabEntry symtabEntry = null;
/*      */     if (this.token.type == 35) {
/*      */       match(35);
/*      */     } else {
/*      */       symtabEntry = paramTypeSpec(paramSymtabEntry);
/*      */     } 
/*      */     return symtabEntry;
/*      */   }
/*      */   
/*      */   private void parameterDcls(MethodEntry paramMethodEntry) throws IOException, ParseException {
/*      */     match(108);
/*      */     parameterDcls2(paramMethodEntry);
/*      */   }
/*      */   
/*      */   private void parameterDcls2(MethodEntry paramMethodEntry) throws IOException, ParseException {
/*      */     if (this.token.type == 109) {
/*      */       match(109);
/*      */     } else {
/*      */       paramDcl(paramMethodEntry);
/*      */       while (this.token.type == 104) {
/*      */         match(104);
/*      */         paramDcl(paramMethodEntry);
/*      */       } 
/*      */       match(109);
/*      */     } 
/*      */   }
/*      */   
/*      */   private void paramDcl(MethodEntry paramMethodEntry) throws IOException, ParseException {
/*      */     ParameterEntry parameterEntry = this.stFactory.parameterEntry(paramMethodEntry, repIDStack.peek());
/*      */     parameterEntry.sourceFile(this.scanner.fileEntry());
/*      */     parameterEntry.comment(this.token.comment);
/*      */     paramAttribute(parameterEntry);
/*      */     parameterEntry.type(paramTypeSpec(paramMethodEntry));
/*      */     parameterEntry.name(this.token.name);
/*      */     match(80);
/*      */     if (isntInList(paramMethodEntry.parameters(), parameterEntry.name()))
/*      */       paramMethodEntry.addParameter(parameterEntry); 
/*      */   }
/*      */   
/*      */   private void paramAttribute(ParameterEntry paramParameterEntry) throws IOException, ParseException {
/*      */     if (this.token.type == 14) {
/*      */       paramParameterEntry.passType(0);
/*      */       match(14);
/*      */     } else if (this.token.type == 23) {
/*      */       paramParameterEntry.passType(2);
/*      */       match(23);
/*      */     } else if (this.token.type == 15) {
/*      */       paramParameterEntry.passType(1);
/*      */       match(15);
/*      */     } else {
/*      */       throw ParseException.syntaxError(this.scanner, new int[] { 14, 23, 15 }, this.token.type);
/*      */     } 
/*      */   }
/*      */   
/*      */   private void raisesExpr(MethodEntry paramMethodEntry) throws IOException, ParseException {
/*      */     match(24);
/*      */     match(108);
/*      */     Comment comment = this.token.comment;
/*      */     SymtabEntry symtabEntry = scopedName(paramMethodEntry.container(), this.stFactory.exceptionEntry());
/*      */     if (typeOf(symtabEntry) instanceof ExceptionEntry) {
/*      */       symtabEntry.comment(comment);
/*      */       if (isntInList(paramMethodEntry.exceptions(), symtabEntry))
/*      */         paramMethodEntry.exceptionsAddElement((ExceptionEntry)symtabEntry); 
/*      */     } else {
/*      */       ParseException.wrongType(this.scanner, symtabEntry.fullName(), "exception", entryName(symtabEntry.type()));
/*      */     } 
/*      */     raisesExpr2(paramMethodEntry);
/*      */     match(109);
/*      */   }
/*      */   
/*      */   private void raisesExpr2(MethodEntry paramMethodEntry) throws IOException, ParseException {
/*      */     while (this.token.type == 104) {
/*      */       match(104);
/*      */       Comment comment = this.token.comment;
/*      */       SymtabEntry symtabEntry = scopedName(paramMethodEntry.container(), this.stFactory.exceptionEntry());
/*      */       if (typeOf(symtabEntry) instanceof ExceptionEntry) {
/*      */         symtabEntry.comment(comment);
/*      */         if (isntInList(paramMethodEntry.exceptions(), symtabEntry))
/*      */           paramMethodEntry.addException((ExceptionEntry)symtabEntry); 
/*      */         continue;
/*      */       } 
/*      */       ParseException.wrongType(this.scanner, symtabEntry.fullName(), "exception", entryName(symtabEntry.type()));
/*      */     } 
/*      */   }
/*      */   
/*      */   private void contextExpr(MethodEntry paramMethodEntry) throws IOException, ParseException {
/*      */     match(6);
/*      */     match(108);
/*      */     String str = (String)stringLiteral().value();
/*      */     if (isntInStringList(paramMethodEntry.contexts(), str))
/*      */       paramMethodEntry.addContext(str); 
/*      */     contextExpr2(paramMethodEntry);
/*      */     match(109);
/*      */   }
/*      */   
/*      */   private void contextExpr2(MethodEntry paramMethodEntry) throws IOException, ParseException {
/*      */     while (this.token.type == 104) {
/*      */       match(104);
/*      */       String str = (String)stringLiteral().value();
/*      */       if (isntInStringList(paramMethodEntry.contexts(), str))
/*      */         paramMethodEntry.addContext(str); 
/*      */     } 
/*      */   }
/*      */   
/*      */   private SymtabEntry paramTypeSpec(SymtabEntry paramSymtabEntry) throws IOException, ParseException {
/*      */     SymtabEntry symtabEntry = null;
/*      */     switch (this.token.type) {
/*      */       case 0:
/*      */       case 2:
/*      */       case 4:
/*      */       case 8:
/*      */       case 13:
/*      */       case 17:
/*      */       case 21:
/*      */       case 27:
/*      */       case 33:
/*      */       case 36:
/*      */         return baseTypeSpec(paramSymtabEntry);
/*      */       case 28:
/*      */       case 37:
/*      */         return stringType(paramSymtabEntry);
/*      */       case 20:
/*      */       case 45:
/*      */       case 80:
/*      */       case 124:
/*      */         symtabEntry = scopedName(paramSymtabEntry.container(), this.stFactory.primitiveEntry());
/*      */         if (typeOf(symtabEntry) instanceof AttributeEntry) {
/*      */           ParseException.attributeNotType(this.scanner, symtabEntry.name());
/*      */         } else if (typeOf(symtabEntry) instanceof MethodEntry) {
/*      */           ParseException.operationNotType(this.scanner, symtabEntry.name());
/*      */         } 
/*      */         return symtabEntry;
/*      */     } 
/*      */     throw ParseException.syntaxError(this.scanner, new int[] { 
/*      */           13, 8, 17, 27, 33, 4, 36, 2, 21, 0, 
/*      */           28, 37, 80, 124, 45 }, this.token.type);
/*      */   }
/*      */   
/*      */   private void match(int paramInt) throws IOException, ParseException {
/*      */     ParseException parseException = null;
/*      */     if (!this.token.equals(paramInt)) {
/*      */       parseException = ParseException.syntaxError(this.scanner, paramInt, this.token.type);
/*      */       if (paramInt == 100)
/*      */         return; 
/*      */     } 
/*      */     this.token = this.scanner.getToken();
/*      */     issueTokenWarnings();
/*      */     this.tokenHistory.insert(this.token);
/*      */     while (this.token.isDirective())
/*      */       this.token = this.prep.process(this.token); 
/*      */     if (this.token.equals(80) || this.token.equals(81)) {
/*      */       String str = (String)this.symbols.get(this.token.name);
/*      */       if (str != null && !str.equals(""))
/*      */         if (this.macros.contains(this.token.name)) {
/*      */           this.scanner.scanString(this.prep.expandMacro(str, this.token));
/*      */           match(this.token.type);
/*      */         } else {
/*      */           this.scanner.scanString(str);
/*      */           match(this.token.type);
/*      */         }  
/*      */     } 
/*      */     if (parseException != null)
/*      */       throw parseException; 
/*      */   }
/*      */   
/*      */   private void issueTokenWarnings() {
/*      */     if (this.noWarn)
/*      */       return; 
/*      */     if ((this.token.equals(80) || this.token.equals(81)) && !this.token.isEscaped())
/*      */       if (this.token.collidesWithKeyword())
/*      */         ParseException.warning(this.scanner, Util.getMessage("Migration.keywordCollision", this.token.name));  
/*      */     if (this.token.isKeyword() && this.token.isDeprecated())
/*      */       ParseException.warning(this.scanner, Util.getMessage("Deprecated.keyword", this.token.toString())); 
/*      */   }
/*      */   
/*      */   private ModuleEntry newModule(ModuleEntry paramModuleEntry) {
/*      */     ModuleEntry moduleEntry = this.stFactory.moduleEntry(paramModuleEntry, repIDStack.peek());
/*      */     moduleEntry.sourceFile(this.scanner.fileEntry());
/*      */     moduleEntry.name(this.token.name);
/*      */     SymtabEntry symtabEntry = (SymtabEntry)symbolTable.get(moduleEntry.fullName());
/*      */     if (!this.cppModule && symtabEntry != null && symtabEntry instanceof ModuleEntry) {
/*      */       moduleEntry = (ModuleEntry)symtabEntry;
/*      */       if (paramModuleEntry == this.topLevelModule)
/*      */         if (!moduleEntry.emit()) {
/*      */           addToContainer(paramModuleEntry, moduleEntry);
/*      */         } else if (!paramModuleEntry.contained().contains(moduleEntry)) {
/*      */           addToContainer(paramModuleEntry, moduleEntry);
/*      */         }  
/*      */     } else {
/*      */       pigeonhole(paramModuleEntry, moduleEntry);
/*      */     } 
/*      */     return moduleEntry;
/*      */   }
/*      */   
/*      */   private EnumEntry newEnumEntry(SymtabEntry paramSymtabEntry) {
/*      */     EnumEntry enumEntry = this.stFactory.enumEntry(paramSymtabEntry, repIDStack.peek());
/*      */     enumEntry.sourceFile(this.scanner.fileEntry());
/*      */     enumEntry.name(this.token.name);
/*      */     pigeonhole(paramSymtabEntry, enumEntry);
/*      */     return enumEntry;
/*      */   }
/*      */   
/*      */   private SequenceEntry newSequenceEntry(SymtabEntry paramSymtabEntry) {
/*      */     SequenceEntry sequenceEntry = this.stFactory.sequenceEntry(paramSymtabEntry, repIDStack.peek());
/*      */     sequenceEntry.sourceFile(this.scanner.fileEntry());
/*      */     sequenceEntry.name("");
/*      */     pigeonhole(paramSymtabEntry, sequenceEntry);
/*      */     return sequenceEntry;
/*      */   }
/*      */   
/*      */   private void updateSymbolTable(String paramString, SymtabEntry paramSymtabEntry, boolean paramBoolean) {
/*      */     String str1 = paramString.toLowerCase();
/*      */     if (paramBoolean && this.lcSymbolTable.get(str1) != null)
/*      */       ParseException.alreadyDeclared(this.scanner, paramString); 
/*      */     symbolTable.put(paramString, paramSymtabEntry);
/*      */     this.lcSymbolTable.put(str1, paramSymtabEntry);
/*      */     String str2 = "org/omg/CORBA";
/*      */     if (paramString.startsWith(str2))
/*      */       overrideNames.put("CORBA" + paramString.substring(str2.length()), paramString); 
/*      */   }
/*      */   
/*      */   private void pigeonhole(SymtabEntry paramSymtabEntry1, SymtabEntry paramSymtabEntry2) {
/*      */     if (paramSymtabEntry2.name().equals(""))
/*      */       paramSymtabEntry2.name("uN__" + ++this.sequence); 
/*      */     String str = paramSymtabEntry2.fullName();
/*      */     if (overrideNames.get(str) == null) {
/*      */       addToContainer(paramSymtabEntry1, paramSymtabEntry2);
/*      */       SymtabEntry symtabEntry = (SymtabEntry)symbolTable.get(str);
/*      */       if (symtabEntry == null) {
/*      */         updateSymbolTable(str, paramSymtabEntry2, true);
/*      */       } else if (symtabEntry instanceof ForwardEntry && paramSymtabEntry2 instanceof InterfaceEntry) {
/*      */         String str1 = ((IDLID)paramSymtabEntry2.repositoryID()).prefix();
/*      */         String str2 = ((IDLID)symtabEntry.repositoryID()).prefix();
/*      */         if (str1.equals(str2)) {
/*      */           updateSymbolTable(str, paramSymtabEntry2, false);
/*      */         } else {
/*      */           ParseException.badRepIDPrefix(this.scanner, str, str2, str1);
/*      */         } 
/*      */       } else if (paramSymtabEntry2 instanceof ForwardEntry && (symtabEntry instanceof InterfaceEntry || symtabEntry instanceof ForwardEntry)) {
/*      */         if (symtabEntry instanceof ForwardEntry && paramSymtabEntry2.repositoryID() instanceof IDLID && symtabEntry.repositoryID() instanceof IDLID) {
/*      */           String str1 = ((IDLID)paramSymtabEntry2.repositoryID()).prefix();
/*      */           String str2 = ((IDLID)symtabEntry.repositoryID()).prefix();
/*      */           if (!str1.equals(str2))
/*      */             ParseException.badRepIDPrefix(this.scanner, str, str2, str1); 
/*      */         } 
/*      */       } else if (!this.cppModule || !(paramSymtabEntry2 instanceof ModuleEntry) || !(symtabEntry instanceof ModuleEntry)) {
/*      */         if (!str.startsWith("org/omg/CORBA") && !str.startsWith("CORBA"))
/*      */           if (isForwardable(symtabEntry, paramSymtabEntry2)) {
/*      */             if (symtabEntry.isReferencable() && paramSymtabEntry2.isReferencable())
/*      */               ParseException.alreadyDeclared(this.scanner, str); 
/*      */             if (paramSymtabEntry2.isReferencable()) {
/*      */               String str1 = symtabEntry.sourceFile().absFilename();
/*      */               String str2 = paramSymtabEntry2.sourceFile().absFilename();
/*      */               if (!str1.equals(str2)) {
/*      */                 ParseException.declNotInSameFile(this.scanner, str, str1);
/*      */               } else {
/*      */                 List list;
/*      */                 updateSymbolTable(str, paramSymtabEntry2, false);
/*      */                 try {
/*      */                   list = (List)symtabEntry.dynamicVariable(ftlKey);
/*      */                 } catch (NoSuchFieldException noSuchFieldException) {
/*      */                   throw new IllegalStateException();
/*      */                 } 
/*      */                 if (list != null) {
/*      */                   Iterator<SymtabEntry> iterator = list.iterator();
/*      */                   while (iterator.hasNext()) {
/*      */                     SymtabEntry symtabEntry1 = iterator.next();
/*      */                     symtabEntry1.type(paramSymtabEntry2);
/*      */                   } 
/*      */                 } 
/*      */               } 
/*      */             } 
/*      */           } else {
/*      */             ParseException.alreadyDeclared(this.scanner, str);
/*      */           }  
/*      */       } 
/*      */     } 
/*      */   }
/*      */   
/*      */   private boolean isForwardable(SymtabEntry paramSymtabEntry1, SymtabEntry paramSymtabEntry2) {
/*      */     return ((paramSymtabEntry1 instanceof StructEntry && paramSymtabEntry2 instanceof StructEntry) || (paramSymtabEntry1 instanceof UnionEntry && paramSymtabEntry2 instanceof UnionEntry));
/*      */   }
/*      */   
/*      */   private void pigeonholeMethod(InterfaceEntry paramInterfaceEntry, MethodEntry paramMethodEntry) {
/*      */     if (paramMethodEntry.name().equals(""))
/*      */       paramMethodEntry.name("uN__" + ++this.sequence); 
/*      */     String str = paramMethodEntry.fullName();
/*      */     if (overrideNames.get(str) == null) {
/*      */       addToContainer(paramInterfaceEntry, paramMethodEntry);
/*      */       String str1 = str.toLowerCase();
/*      */       symbolTable.put(str, paramMethodEntry);
/*      */       this.lcSymbolTable.put(str1, paramMethodEntry);
/*      */       if (str.startsWith("org/omg/CORBA"))
/*      */         overrideNames.put("CORBA" + str.substring(13), str); 
/*      */     } 
/*      */   }
/*      */   
/*      */   private void addToContainer(SymtabEntry paramSymtabEntry1, SymtabEntry paramSymtabEntry2) {
/*      */     if (paramSymtabEntry1 instanceof ModuleEntry) {
/*      */       ((ModuleEntry)paramSymtabEntry1).addContained(paramSymtabEntry2);
/*      */     } else if (paramSymtabEntry1 instanceof InterfaceEntry) {
/*      */       ((InterfaceEntry)paramSymtabEntry1).addContained(paramSymtabEntry2);
/*      */     } else if (paramSymtabEntry1 instanceof StructEntry) {
/*      */       ((StructEntry)paramSymtabEntry1).addContained(paramSymtabEntry2);
/*      */     } else if (paramSymtabEntry1 instanceof UnionEntry) {
/*      */       ((UnionEntry)paramSymtabEntry1).addContained(paramSymtabEntry2);
/*      */     } else if (paramSymtabEntry1 instanceof SequenceEntry) {
/*      */       ((SequenceEntry)paramSymtabEntry1).addContained(paramSymtabEntry2);
/*      */     } 
/*      */   }
/*      */   
/*      */   SymtabEntry qualifiedEntry(String paramString) {
/*      */     SymtabEntry symtabEntry = recursiveQualifiedEntry(paramString);
/*      */     if (symtabEntry == null) {
/*      */       ParseException.undeclaredType(this.scanner, paramString);
/*      */     } else if (symtabEntry instanceof ModuleEntry && !this._isModuleLegalType) {
/*      */       ParseException.moduleNotType(this.scanner, paramString);
/*      */       symtabEntry = null;
/*      */     } 
/*      */     return symtabEntry;
/*      */   }
/*      */   
/*      */   SymtabEntry recursiveQualifiedEntry(String paramString) {
/*      */     SymtabEntry symtabEntry = null;
/*      */     if (paramString != null && !paramString.equals("void")) {
/*      */       int i = paramString.lastIndexOf('/');
/*      */       if (i >= 0) {
/*      */         symtabEntry = recursiveQualifiedEntry(paramString.substring(0, i));
/*      */         if (symtabEntry == null)
/*      */           return null; 
/*      */         if (symtabEntry instanceof TypedefEntry)
/*      */           paramString = typeOf(symtabEntry).fullName() + paramString.substring(i); 
/*      */       } 
/*      */       symtabEntry = searchOverrideNames(paramString);
/*      */       if (symtabEntry == null)
/*      */         symtabEntry = (SymtabEntry)symbolTable.get(paramString); 
/*      */       if (symtabEntry == null)
/*      */         symtabEntry = searchGlobalInheritanceScope(paramString); 
/*      */     } 
/*      */     return symtabEntry;
/*      */   }
/*      */   
/*      */   SymtabEntry partlyQualifiedEntry(String paramString, SymtabEntry paramSymtabEntry) {
/*      */     SymtabEntry symtabEntry = null;
/*      */     if (paramString != null) {
/*      */       int i = paramString.lastIndexOf('/');
/*      */       symtabEntry = recursivePQEntry(paramString.substring(0, i), paramSymtabEntry);
/*      */       if (symtabEntry instanceof TypedefEntry)
/*      */         paramString = typeOf(symtabEntry).fullName() + paramString.substring(i); 
/*      */       if (paramSymtabEntry != null)
/*      */         symtabEntry = searchModuleScope(paramString.substring(0, paramString.lastIndexOf('/')), paramSymtabEntry); 
/*      */       if (symtabEntry == null) {
/*      */         symtabEntry = qualifiedEntry(paramString);
/*      */       } else {
/*      */         symtabEntry = qualifiedEntry(symtabEntry.fullName() + paramString.substring(paramString.lastIndexOf('/')));
/*      */       } 
/*      */     } 
/*      */     return symtabEntry;
/*      */   }
/*      */   
/*      */   SymtabEntry recursivePQEntry(String paramString, SymtabEntry paramSymtabEntry) {
/*      */     SymtabEntry symtabEntry = null;
/*      */     if (paramString != null) {
/*      */       int i = paramString.lastIndexOf('/');
/*      */       if (i < 0) {
/*      */         symtabEntry = searchModuleScope(paramString, paramSymtabEntry);
/*      */       } else {
/*      */         symtabEntry = recursivePQEntry(paramString.substring(0, i), paramSymtabEntry);
/*      */         if (symtabEntry == null)
/*      */           return null; 
/*      */         if (symtabEntry instanceof TypedefEntry)
/*      */           paramString = typeOf(symtabEntry).fullName() + paramString.substring(i); 
/*      */         if (paramSymtabEntry != null)
/*      */           symtabEntry = searchModuleScope(paramString.substring(0, paramString.lastIndexOf('/')), paramSymtabEntry); 
/*      */         if (symtabEntry == null) {
/*      */           recursiveQualifiedEntry(paramString);
/*      */         } else {
/*      */           symtabEntry = recursiveQualifiedEntry(symtabEntry.fullName() + paramString.substring(paramString.lastIndexOf('/')));
/*      */         } 
/*      */       } 
/*      */     } 
/*      */     return symtabEntry;
/*      */   }
/*      */   
/*      */   SymtabEntry unqualifiedEntry(String paramString, SymtabEntry paramSymtabEntry) {
/*      */     SymtabEntry symtabEntry = unqualifiedEntryWMod(paramString, paramSymtabEntry);
/*      */     if (symtabEntry instanceof ModuleEntry && !this._isModuleLegalType) {
/*      */       ParseException.moduleNotType(this.scanner, paramString);
/*      */       symtabEntry = null;
/*      */     } 
/*      */     return symtabEntry;
/*      */   }
/*      */   
/*      */   SymtabEntry unqualifiedEntryWMod(String paramString, SymtabEntry paramSymtabEntry) {
/*      */     SymtabEntry symtabEntry = null;
/*      */     if (paramString != null && !paramString.equals("void")) {
/*      */       symtabEntry = (SymtabEntry)symbolTable.get(paramSymtabEntry.fullName() + '/' + paramString);
/*      */       if (symtabEntry == null)
/*      */         symtabEntry = searchLocalInheritanceScope(paramString, paramSymtabEntry); 
/*      */       if (symtabEntry == null)
/*      */         symtabEntry = searchOverrideNames(paramString); 
/*      */       if (symtabEntry == null && paramSymtabEntry != null)
/*      */         symtabEntry = searchModuleScope(paramString, paramSymtabEntry); 
/*      */       if (symtabEntry == null)
/*      */         symtabEntry = searchParentInheritanceScope(paramString, paramSymtabEntry); 
/*      */     } 
/*      */     if (symtabEntry == null)
/*      */       ParseException.undeclaredType(this.scanner, paramString); 
/*      */     return symtabEntry;
/*      */   }
/*      */   
/*      */   SymtabEntry searchParentInheritanceScope(String paramString, SymtabEntry paramSymtabEntry) {
/*      */     String str1 = paramSymtabEntry.fullName();
/*      */     while (paramSymtabEntry != null && !str1.equals("") && !(paramSymtabEntry instanceof InterfaceEntry)) {
/*      */       int i = str1.lastIndexOf('/');
/*      */       if (i < 0) {
/*      */         str1 = "";
/*      */         continue;
/*      */       } 
/*      */       str1 = str1.substring(0, i);
/*      */       paramSymtabEntry = (SymtabEntry)symbolTable.get(str1);
/*      */     } 
/*      */     if (paramSymtabEntry == null || !(paramSymtabEntry instanceof InterfaceEntry))
/*      */       return null; 
/*      */     String str2 = paramSymtabEntry.fullName() + '/' + paramString;
/*      */     SymtabEntry symtabEntry = (SymtabEntry)symbolTable.get(str2);
/*      */     if (symtabEntry != null)
/*      */       return symtabEntry; 
/*      */     return searchLocalInheritanceScope(paramString, paramSymtabEntry);
/*      */   }
/*      */   
/*      */   SymtabEntry searchGlobalInheritanceScope(String paramString) {
/*      */     int i = paramString.lastIndexOf('/');
/*      */     SymtabEntry symtabEntry = null;
/*      */     if (i >= 0) {
/*      */       String str = paramString.substring(0, i);
/*      */       symtabEntry = (SymtabEntry)symbolTable.get(str);
/*      */       symtabEntry = (symtabEntry instanceof InterfaceEntry) ? searchLocalInheritanceScope(paramString.substring(i + 1), symtabEntry) : null;
/*      */     } 
/*      */     return symtabEntry;
/*      */   }
/*      */   
/*      */   SymtabEntry searchLocalInheritanceScope(String paramString, SymtabEntry paramSymtabEntry) {
/*      */     return (paramSymtabEntry instanceof InterfaceEntry) ? searchDerivedFrom(paramString, (InterfaceEntry)paramSymtabEntry) : null;
/*      */   }
/*      */   
/*      */   SymtabEntry searchOverrideNames(String paramString) {
/*      */     String str = (String)overrideNames.get(paramString);
/*      */     return (str != null) ? (SymtabEntry)symbolTable.get(str) : null;
/*      */   }
/*      */   
/*      */   SymtabEntry searchModuleScope(String paramString, SymtabEntry paramSymtabEntry) {
/*      */     String str1 = paramSymtabEntry.fullName();
/*      */     String str2 = str1 + '/' + paramString;
/*      */     SymtabEntry symtabEntry = (SymtabEntry)symbolTable.get(str2);
/*      */     while (symtabEntry == null && !str1.equals("")) {
/*      */       int i = str1.lastIndexOf('/');
/*      */       if (i < 0) {
/*      */         str1 = "";
/*      */         continue;
/*      */       } 
/*      */       str1 = str1.substring(0, i);
/*      */       str2 = str1 + '/' + paramString;
/*      */       symtabEntry = (SymtabEntry)symbolTable.get(str2);
/*      */     } 
/*      */     return (symtabEntry == null) ? (SymtabEntry)symbolTable.get(paramString) : symtabEntry;
/*      */   }
/*      */   
/*      */   SymtabEntry searchDerivedFrom(String paramString, InterfaceEntry paramInterfaceEntry) {
/*      */     for (Enumeration<SymtabEntry> enumeration = paramInterfaceEntry.derivedFrom().elements(); enumeration.hasMoreElements(); ) {
/*      */       SymtabEntry symtabEntry = enumeration.nextElement();
/*      */       if (symtabEntry instanceof InterfaceEntry) {
/*      */         InterfaceEntry interfaceEntry = (InterfaceEntry)symtabEntry;
/*      */         String str = interfaceEntry.fullName() + '/' + paramString;
/*      */         SymtabEntry symtabEntry1 = (SymtabEntry)symbolTable.get(str);
/*      */         if (symtabEntry1 != null)
/*      */           return symtabEntry1; 
/*      */         symtabEntry1 = searchDerivedFrom(paramString, interfaceEntry);
/*      */         if (symtabEntry1 != null)
/*      */           return symtabEntry1; 
/*      */       } 
/*      */     } 
/*      */     return null;
/*      */   }
/*      */   
/*      */   String entryName(SymtabEntry paramSymtabEntry) {
/*      */     if (paramSymtabEntry instanceof AttributeEntry)
/*      */       return "attribute"; 
/*      */     if (paramSymtabEntry instanceof ConstEntry)
/*      */       return "constant"; 
/*      */     if (paramSymtabEntry instanceof EnumEntry)
/*      */       return "enumeration"; 
/*      */     if (paramSymtabEntry instanceof ExceptionEntry)
/*      */       return "exception"; 
/*      */     if (paramSymtabEntry instanceof ValueBoxEntry)
/*      */       return "value box"; 
/*      */     if (paramSymtabEntry instanceof ForwardValueEntry || paramSymtabEntry instanceof ValueEntry)
/*      */       return "value"; 
/*      */     if (paramSymtabEntry instanceof ForwardEntry || paramSymtabEntry instanceof InterfaceEntry)
/*      */       return "interface"; 
/*      */     if (paramSymtabEntry instanceof MethodEntry)
/*      */       return "method"; 
/*      */     if (paramSymtabEntry instanceof ModuleEntry)
/*      */       return "module"; 
/*      */     if (paramSymtabEntry instanceof ParameterEntry)
/*      */       return "parameter"; 
/*      */     if (paramSymtabEntry instanceof PrimitiveEntry)
/*      */       return "primitive"; 
/*      */     if (paramSymtabEntry instanceof SequenceEntry)
/*      */       return "sequence"; 
/*      */     if (paramSymtabEntry instanceof StringEntry)
/*      */       return "string"; 
/*      */     if (paramSymtabEntry instanceof StructEntry)
/*      */       return "struct"; 
/*      */     if (paramSymtabEntry instanceof TypedefEntry)
/*      */       return "typedef"; 
/*      */     if (paramSymtabEntry instanceof UnionEntry)
/*      */       return "union"; 
/*      */     return "void";
/*      */   }
/*      */   
/*      */   private boolean isInterface(SymtabEntry paramSymtabEntry) {
/*      */     return (paramSymtabEntry instanceof InterfaceEntry || (paramSymtabEntry instanceof ForwardEntry && !(paramSymtabEntry instanceof ForwardValueEntry)));
/*      */   }
/*      */   
/*      */   private boolean isValue(SymtabEntry paramSymtabEntry) {
/*      */     return paramSymtabEntry instanceof ValueEntry;
/*      */   }
/*      */   
/*      */   private boolean isInterfaceOnly(SymtabEntry paramSymtabEntry) {
/*      */     return paramSymtabEntry instanceof InterfaceEntry;
/*      */   }
/*      */   
/*      */   private boolean isForward(SymtabEntry paramSymtabEntry) {
/*      */     return paramSymtabEntry instanceof ForwardEntry;
/*      */   }
/*      */   
/*      */   private boolean isntInStringList(Vector paramVector, String paramString) {
/*      */     boolean bool = true;
/*      */     Enumeration<String> enumeration = paramVector.elements();
/*      */     while (enumeration.hasMoreElements()) {
/*      */       if (paramString.equals(enumeration.nextElement())) {
/*      */         ParseException.alreadyDeclared(this.scanner, paramString);
/*      */         bool = false;
/*      */         break;
/*      */       } 
/*      */     } 
/*      */     return bool;
/*      */   }
/*      */   
/*      */   private boolean isntInList(Vector paramVector, String paramString) {
/*      */     boolean bool = true;
/*      */     for (Enumeration<SymtabEntry> enumeration = paramVector.elements(); enumeration.hasMoreElements();) {
/*      */       if (paramString.equals(((SymtabEntry)enumeration.nextElement()).name())) {
/*      */         ParseException.alreadyDeclared(this.scanner, paramString);
/*      */         bool = false;
/*      */         break;
/*      */       } 
/*      */     } 
/*      */     return bool;
/*      */   }
/*      */   
/*      */   private boolean isntInList(Vector paramVector, SymtabEntry paramSymtabEntry) {
/*      */     boolean bool = true;
/*      */     for (Enumeration<SymtabEntry> enumeration = paramVector.elements(); enumeration.hasMoreElements(); ) {
/*      */       SymtabEntry symtabEntry = enumeration.nextElement();
/*      */       if (paramSymtabEntry == symtabEntry) {
/*      */         ParseException.alreadyDeclared(this.scanner, paramSymtabEntry.fullName());
/*      */         bool = false;
/*      */         break;
/*      */       } 
/*      */     } 
/*      */     return bool;
/*      */   }
/*      */   
/*      */   public static SymtabEntry typeOf(SymtabEntry paramSymtabEntry) {
/*      */     while (paramSymtabEntry instanceof TypedefEntry)
/*      */       paramSymtabEntry = paramSymtabEntry.type(); 
/*      */     return paramSymtabEntry;
/*      */   }
/*      */   
/*      */   void forwardEntryCheck() {
/*      */     for (Enumeration<SymtabEntry> enumeration = symbolTable.elements(); enumeration.hasMoreElements(); ) {
/*      */       SymtabEntry symtabEntry = enumeration.nextElement();
/*      */       if (symtabEntry instanceof ForwardEntry)
/*      */         ParseException.forwardEntry(this.scanner, symtabEntry.fullName()); 
/*      */     } 
/*      */   }
/*      */   
/*      */   private void skipToSemicolon() throws IOException {
/*      */     while (!this.token.equals(999) && !this.token.equals(100)) {
/*      */       if (this.token.equals(101))
/*      */         skipToRightBrace(); 
/*      */       try {
/*      */         match(this.token.type);
/*      */       } catch (ParseException parseException) {}
/*      */     } 
/*      */     if (this.token.equals(999))
/*      */       throw new EOFException(); 
/*      */     try {
/*      */       match(100);
/*      */     } catch (Exception exception) {}
/*      */   }
/*      */   
/*      */   private void skipToRightBrace() throws IOException {
/*      */     boolean bool = true;
/*      */     while (!this.token.equals(999) && !this.token.equals(102)) {
/*      */       if (bool) {
/*      */         bool = false;
/*      */       } else if (this.token.equals(101)) {
/*      */         skipToRightBrace();
/*      */       } 
/*      */       try {
/*      */         match(this.token.type);
/*      */       } catch (ParseException parseException) {}
/*      */     } 
/*      */     if (this.token.equals(999))
/*      */       throw new EOFException(); 
/*      */   }
/*      */   
/*      */   public static void enteringInclude() {
/*      */     repIDStack.push(new IDLID());
/*      */   }
/*      */   
/*      */   public static void exitingInclude() {
/*      */     repIDStack.pop();
/*      */   }
/*      */   
/*      */   static Stack repIDStack = new Stack();
/*      */   private static int ftlKey = SymtabEntry.getVariableKey();
/*      */   int sequence;
/*      */   Vector includes;
/*      */   Vector includeEntries;
/*      */   boolean parsingConditionalExpr;
/*      */   Token token;
/*      */   ModuleEntry topLevelModule;
/*      */   private Preprocessor prep;
/*      */   private boolean verbose;
/*      */   SymtabFactory stFactory;
/*      */   ExprFactory exprFactory;
/*      */   private String[] keywords;
/*      */   private TokenBuffer tokenHistory;
/*      */   protected float corbaLevel;
/*      */   private Arguments arguments;
/*      */ }


/* Location:              C:\Program Files\Java\jdk1.8.0_211\lib\tools.jar!\com\sun\tools\corba\se\idl\Parser.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */